[NbConvertApp] Searching ['/home/rain/exp_env/.venv/etc/jupyter', '/home/rain/.jupyter', '/usr/local/etc/jupyter', '/etc/jupyter'] for config files
[NbConvertApp] Looking for jupyter_config in /etc/jupyter
[NbConvertApp] Looking for jupyter_config in /usr/local/etc/jupyter
[NbConvertApp] Looking for jupyter_config in /home/rain/.jupyter
[NbConvertApp] Looking for jupyter_config in /home/rain/exp_env/.venv/etc/jupyter
[NbConvertApp] Looking for jupyter_nbconvert_config in /etc/jupyter
[NbConvertApp] Looking for jupyter_nbconvert_config in /usr/local/etc/jupyter
[NbConvertApp] Looking for jupyter_nbconvert_config in /home/rain/.jupyter
[NbConvertApp] Looking for jupyter_nbconvert_config in /home/rain/exp_env/.venv/etc/jupyter
[NbConvertApp] Looping through config variables with prefix "JUPYTER_NBCONVERT"
[NbConvertApp] Converting notebook /home/rain/exp_env/src/work/translate/trans.ipynb to notebook
[NbConvertApp] Notebook name is 'trans'
[NbConvertApp] Applying preprocessor: ExecutePreprocessor
[NbConvertApp] Instantiating kernel 'Python 3 (ipykernel)' with kernel provisioner: local-provisioner
[NbConvertApp] Starting kernel: ['/home/rain/exp_env/.venv/bin/python', '-m', 'ipykernel_launcher', '-f', '/tmp/tmpay2io2jo.json', '--HistoryManager.hist_file=:memory:']
[NbConvertApp] Connecting to: tcp://127.0.0.1:58953
[NbConvertApp] connecting iopub channel to tcp://127.0.0.1:49111
[NbConvertApp] Connecting to: tcp://127.0.0.1:49111
[NbConvertApp] connecting shell channel to tcp://127.0.0.1:35167
[NbConvertApp] Connecting to: tcp://127.0.0.1:35167
[NbConvertApp] connecting stdin channel to tcp://127.0.0.1:38317
[NbConvertApp] Connecting to: tcp://127.0.0.1:38317
[NbConvertApp] connecting heartbeat channel to tcp://127.0.0.1:58673
[NbConvertApp] connecting control channel to tcp://127.0.0.1:58953
[NbConvertApp] Connecting to: tcp://127.0.0.1:58953
[NbConvertApp] Executing cell:
import pandas as pd
from exp_env.transformers.models import transformer
import sentencepiece as spm
import torch
from dataclasses import dataclass
import numpy as np
import gc
#default„Åßbf16„Çí‰Ωø„ÅÜ„Çà„ÅÜ„Å´„Åô„Çã
torch.set_default_dtype(torch.bfloat16)
torch.backends.cudnn.benchmark = True
# torch.backends.cudnn.allow_tf32 = True
dev_mode = False
import random
from exp_env.utils.utils import fix_seed
fix_seed(42)
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import pandas as pd\nfrom exp_env.transformers.models import transformer\nimport sentencepiece as spm\nimport torch\nfrom dataclasses import dataclass\nimport numpy as np\nimport gc\n#default„Åßbf16„Çí‰Ωø„ÅÜ„Çà„ÅÜ„Å´„Åô„Çã\ntorch.set_default_dtype(torch.bfloat16)\ntorch.backends.cudnn.benchmark = True\n# torch.backends.cudnn.allow_tf32 = True\ndev_mode = False\nimport random\nfrom exp_env.utils.utils import fix_seed\nfix_seed(42)', 'execution_count': 1}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
from tokenizers.implementations import SentencePieceUnigramTokenizer
from transformers import PreTrainedTokenizerFast
import os
os.environ["TOKENIZERS_PARALLELISM"] = "false"
def load_tokenizer(model_name):
    tokenizer = SentencePieceUnigramTokenizer.from_spm(model_name)
    return PreTrainedTokenizerFast(tokenizer_object=tokenizer._tokenizer, pad_token='[PAD]', bos_token='[BOS]', eos_token='[EOS]', unk_token='[UNK]')

jp_tokenizer = load_tokenizer('tokenizer/jesc_jp.model')
en_tokenizer = load_tokenizer('tokenizer/jesc_en.model')
tokend=jp_tokenizer(text=['„Åì„Çì„Å´„Å°„ÅØüòÉ'],  truncation=True, padding='max_length' , max_length=10, return_tensors='pt')
print(jp_tokenizer.decode(tokend['input_ids'][0]))
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'from tokenizers.implementations import SentencePieceUnigramTokenizer\nfrom transformers import PreTrainedTokenizerFast\nimport os\nos.environ["TOKENIZERS_PARALLELISM"] = "false"\ndef load_tokenizer(model_name):\n    tokenizer = SentencePieceUnigramTokenizer.from_spm(model_name)\n    return PreTrainedTokenizerFast(tokenizer_object=tokenizer._tokenizer, pad_token=\'[PAD]\', bos_token=\'[BOS]\', eos_token=\'[EOS]\', unk_token=\'[UNK]\')\n\njp_tokenizer = load_tokenizer(\'tokenizer/jesc_jp.model\')\nen_tokenizer = load_tokenizer(\'tokenizer/jesc_en.model\')\ntokend=jp_tokenizer(text=[\'„Åì„Çì„Å´„Å°„ÅØüòÉ\'],  truncation=True, padding=\'max_length\' , max_length=10, return_tensors=\'pt\')\nprint(jp_tokenizer.decode(tokend[\'input_ids\'][0]))', 'execution_count': 2}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '/home/rain/exp_env/.venv/lib/python3.11/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '„Åì„Çì„Å´„Å°„ÅØ<0xF0><0x9F><0x98><0x83>[PAD][PAD][PAD][PAD][PAD]\n'}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
train_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/all/concat",sep="\t",header=None)#.sample(frac=0.14)
if dev_mode:
    train_df = train_df.sample(2000)
train_x = train_df[1].values.tolist()
train_y = train_df[0].values.tolist()
train_y = ['[BOS] ' + text + ' [EOS]' for text in train_y]
test_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/cleaned_jesc/test",sep="\t",header=None)
test_x = test_df[1].values.tolist()
test_y = test_df[0].values.tolist()
test_y = ['[BOS] ' + text + ' [EOS]' for text in test_y]
dev_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/cleaned_jesc/dev",sep="\t",header=None)
dev_x = dev_df[1].values.tolist()
dev_y = dev_df[0].values.tolist()
dev_y = ['[BOS] ' + text + ' [EOS]' for text in dev_y]

test_x = test_x+dev_x
test_y = test_y+dev_y

[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'train_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/all/concat",sep="\\t",header=None)#.sample(frac=0.14)\nif dev_mode:\n    train_df = train_df.sample(2000)\ntrain_x = train_df[1].values.tolist()\ntrain_y = train_df[0].values.tolist()\ntrain_y = [\'[BOS] \' + text + \' [EOS]\' for text in train_y]\ntest_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/cleaned_jesc/test",sep="\\t",header=None)\ntest_x = test_df[1].values.tolist()\ntest_y = test_df[0].values.tolist()\ntest_y = [\'[BOS] \' + text + \' [EOS]\' for text in test_y]\ndev_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/cleaned_jesc/dev",sep="\\t",header=None)\ndev_x = dev_df[1].values.tolist()\ndev_y = dev_df[0].values.tolist()\ndev_y = [\'[BOS] \' + text + \' [EOS]\' for text in dev_y]\n\ntest_x = test_x+dev_x\ntest_y = test_y+dev_y\n', 'execution_count': 3}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
class Masker:
    def __init__(self, device):
        self.device = device
    @staticmethod
    @torch.jit.script
    def _subsequent_mask(x: torch.Tensor) -> torch.Tensor:
        batch_size = x.size(0)
        max_len = x.size(1)
        return torch.tril(torch.ones(batch_size, max_len, max_len)).eq(0).to('cpu')
    @staticmethod
    @torch.jit.script
    def _pad_mask(mask: torch.Tensor) -> torch.Tensor:
        return mask.eq(0).unsqueeze(1).repeat(1, mask.size(1), 1).to('cpu')
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': "class Masker:\n    def __init__(self, device):\n        self.device = device\n    @staticmethod\n    @torch.jit.script\n    def _subsequent_mask(x: torch.Tensor) -> torch.Tensor:\n        batch_size = x.size(0)\n        max_len = x.size(1)\n        return torch.tril(torch.ones(batch_size, max_len, max_len)).eq(0).to('cpu')\n    @staticmethod\n    @torch.jit.script\n    def _pad_mask(mask: torch.Tensor) -> torch.Tensor:\n        return mask.eq(0).unsqueeze(1).repeat(1, mask.size(1), 1).to('cpu')", 'execution_count': 4}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
from typing import Iterator
from exp_env.data.data_maker_base import DataMaker, DataMakerSpec

@dataclass
class SpmTokenizerSpec(DataMakerSpec):
    model_name: str
    max_length: int

class SpmTokenizer(DataMaker):
    def __init__(self, spec: SpmTokenizerSpec):
        self.tokenizer = load_tokenizer(spec.model_name)
        self.max_length = spec.max_length

    def make(self, data: list[str]) -> tuple[torch.Tensor, torch.Tensor]:
        tokenized=self.tokenizer(data,  truncation=True, padding='max_length' , max_length=self.max_length, return_tensors='pt')
        return tokenized['input_ids'], tokenized['attention_mask'] # type: ignore
    
class TransformerTrainDataMaker(DataMaker):
    def __init__(self, src_spec: SpmTokenizerSpec, tgt_spec: SpmTokenizerSpec, masker: Masker):
        self.src_tokenizer = SpmTokenizer(src_spec)
        self.tgt_tokenizer = SpmTokenizer(tgt_spec)
        self.masker = masker
    @torch.no_grad()
    def make(self, src_texts: list[str], tgt_texts: list[str],is_train:bool=False) -> tuple[Iterator[tuple[torch.Tensor, torch.Tensor]], Iterator[tuple[torch.Tensor, torch.Tensor]]]:
        src_ids, encoder_mask = self.src_tokenizer.make(src_texts)
        encoder_mask = self.masker._pad_mask(encoder_mask)
        tgt_ids, decoder_mask = self.tgt_tokenizer.make(tgt_texts)
        decoder_mask = self.masker._pad_mask(decoder_mask)
        if is_train:
            seq_mask = self.masker._subsequent_mask(tgt_ids)
            decoder_mask = torch.logical_or(
                seq_mask,
                decoder_mask,
            )
        src=(src_ids, encoder_mask)
        tgt=(tgt_ids, decoder_mask)
        return src, tgt # type: ignore
max_length = 256
maker=TransformerTrainDataMaker(SpmTokenizerSpec('tokenizer/jesc_jp.model', max_length), SpmTokenizerSpec('tokenizer/jesc_en.model', max_length), Masker('cpu'))
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': "from typing import Iterator\nfrom exp_env.data.data_maker_base import DataMaker, DataMakerSpec\n\n@dataclass\nclass SpmTokenizerSpec(DataMakerSpec):\n    model_name: str\n    max_length: int\n\nclass SpmTokenizer(DataMaker):\n    def __init__(self, spec: SpmTokenizerSpec):\n        self.tokenizer = load_tokenizer(spec.model_name)\n        self.max_length = spec.max_length\n\n    def make(self, data: list[str]) -> tuple[torch.Tensor, torch.Tensor]:\n        tokenized=self.tokenizer(data,  truncation=True, padding='max_length' , max_length=self.max_length, return_tensors='pt')\n        return tokenized['input_ids'], tokenized['attention_mask'] # type: ignore\n    \nclass TransformerTrainDataMaker(DataMaker):\n    def __init__(self, src_spec: SpmTokenizerSpec, tgt_spec: SpmTokenizerSpec, masker: Masker):\n        self.src_tokenizer = SpmTokenizer(src_spec)\n        self.tgt_tokenizer = SpmTokenizer(tgt_spec)\n        self.masker = masker\n    @torch.no_grad()\n    def make(self, src_texts: list[str], tgt_texts: list[str],is_train:bool=False) -> tuple[Iterator[tuple[torch.Tensor, torch.Tensor]], Iterator[tuple[torch.Tensor, torch.Tensor]]]:\n        src_ids, encoder_mask = self.src_tokenizer.make(src_texts)\n        encoder_mask = self.masker._pad_mask(encoder_mask)\n        tgt_ids, decoder_mask = self.tgt_tokenizer.make(tgt_texts)\n        decoder_mask = self.masker._pad_mask(decoder_mask)\n        if is_train:\n            seq_mask = self.masker._subsequent_mask(tgt_ids)\n            decoder_mask = torch.logical_or(\n                seq_mask,\n                decoder_mask,\n            )\n        src=(src_ids, encoder_mask)\n        tgt=(tgt_ids, decoder_mask)\n        return src, tgt # type: ignore\nmax_length = 256\nmaker=TransformerTrainDataMaker(SpmTokenizerSpec('tokenizer/jesc_jp.model', max_length), SpmTokenizerSpec('tokenizer/jesc_en.model', max_length), Masker('cpu'))", 'execution_count': 5}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
from torch.utils import data as data

@dataclass
class BaseTrainPipelineConfig:
    batch_size:int=64
    max_epochs:int|None=2
    skip=0
    is_running:bool=True
    debug:bool=False
@dataclass
class BaseTrainGenKeys:
    epoch='epoch'
    train_loss='train_loss'
    test_loss='test_loss'
    batch_x='batch_x'
    batch_y='batch_y'
    batch_step='batch_step'
    max_batch_step='max_batch_step'

class BaseTrainPipeline:
    def __init__(self,config:BaseTrainPipelineConfig):
        self.config=config
    def epoch_gen(self):
        i=0
        while True:
            yield {BaseTrainGenKeys.epoch:i}
            i+=1
            if self.config.max_epochs is not None:
                if i>=self.config.max_epochs:
                    break
            if not self.config.is_running:
                break

    def batch_gen(self,G,dataset,scale=1):
        dataloader=data.DataLoader(dataset,batch_size=self.config.batch_size*scale,shuffle=True,num_workers=6,pin_memory=True)
        all_step=0
        for g in G:
            for i,(batch_X,batch_y) in enumerate(dataloader):
                if all_step<self.config.skip:
                    all_step+=1
                    continue
                g[BaseTrainGenKeys.batch_x]=batch_X
                g[BaseTrainGenKeys.batch_y]=batch_y
                g[BaseTrainGenKeys.batch_step]=i+1
                g[BaseTrainGenKeys.max_batch_step]=len(dataloader)
                all_step+=1
                yield g
                if self.config.debug:
                    break
                gc.collect()
    
    def train_loop_gen(self,train_dataset):
        g=self.epoch_gen()
        g=self.batch_gen(g,train_dataset)
        return g
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': "from torch.utils import data as data\n\n@dataclass\nclass BaseTrainPipelineConfig:\n    batch_size:int=64\n    max_epochs:int|None=2\n    skip=0\n    is_running:bool=True\n    debug:bool=False\n@dataclass\nclass BaseTrainGenKeys:\n    epoch='epoch'\n    train_loss='train_loss'\n    test_loss='test_loss'\n    batch_x='batch_x'\n    batch_y='batch_y'\n    batch_step='batch_step'\n    max_batch_step='max_batch_step'\n\nclass BaseTrainPipeline:\n    def __init__(self,config:BaseTrainPipelineConfig):\n        self.config=config\n    def epoch_gen(self):\n        i=0\n        while True:\n            yield {BaseTrainGenKeys.epoch:i}\n            i+=1\n            if self.config.max_epochs is not None:\n                if i>=self.config.max_epochs:\n                    break\n            if not self.config.is_running:\n                break\n\n    def batch_gen(self,G,dataset,scale=1):\n        dataloader=data.DataLoader(dataset,batch_size=self.config.batch_size*scale,shuffle=True,num_workers=6,pin_memory=True)\n        all_step=0\n        for g in G:\n            for i,(batch_X,batch_y) in enumerate(dataloader):\n                if all_step<self.config.skip:\n                    all_step+=1\n                    continue\n                g[BaseTrainGenKeys.batch_x]=batch_X\n                g[BaseTrainGenKeys.batch_y]=batch_y\n                g[BaseTrainGenKeys.batch_step]=i+1\n                g[BaseTrainGenKeys.max_batch_step]=len(dataloader)\n                all_step+=1\n                yield g\n                if self.config.debug:\n                    break\n                gc.collect()\n    \n    def train_loop_gen(self,train_dataset):\n        g=self.epoch_gen()\n        g=self.batch_gen(g,train_dataset)\n        return g", 'execution_count': 6}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:


class TransformerTrainDataLoader(data.Dataset):
    def __init__(self, data_maker: TransformerTrainDataMaker, src_texts: list[str], tgt_texts: list[str],is_train:bool=False):
        self.data_maker = data_maker
        self.src_texts = src_texts
        self.tgt_texts = tgt_texts
        self.is_train=is_train

    def __len__(self):
        return len(self.src_texts)

    def __getitem__(self, idx):
        return self.data_maker.make(self.src_texts[idx], self.tgt_texts[idx],is_train=self.is_train)

train_dataset = TransformerTrainDataLoader(maker, train_x, train_y,is_train=True)
test_dataset = TransformerTrainDataLoader(maker, test_x, test_y,is_train=False)
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': '\n\nclass TransformerTrainDataLoader(data.Dataset):\n    def __init__(self, data_maker: TransformerTrainDataMaker, src_texts: list[str], tgt_texts: list[str],is_train:bool=False):\n        self.data_maker = data_maker\n        self.src_texts = src_texts\n        self.tgt_texts = tgt_texts\n        self.is_train=is_train\n\n    def __len__(self):\n        return len(self.src_texts)\n\n    def __getitem__(self, idx):\n        return self.data_maker.make(self.src_texts[idx], self.tgt_texts[idx],is_train=self.is_train)\n\ntrain_dataset = TransformerTrainDataLoader(maker, train_x, train_y,is_train=True)\ntest_dataset = TransformerTrainDataLoader(maker, test_x, test_y,is_train=False)', 'execution_count': 7}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Skipping non-executing cell 7
[NbConvertApp] Executing cell:
len(train_x)//128
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'len(train_x)//128', 'execution_count': 8}
[NbConvertApp] msg_type: execute_result
[NbConvertApp] content: {'data': {'text/plain': '79139'}, 'metadata': {}, 'execution_count': 8}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
import math


class CosineAnnealingLR(torch.optim.lr_scheduler._LRScheduler):
    def __init__(
        self,
        optimizer: torch.optim.Optimizer,
        warmup_epochs: int,
        max_epochs: int,
        warmup_start_lr: float = 0.00001,
        eta_min: float = 0.00001,
        last_epoch: int = -1,
    ):
        """
        Args:
            optimizer (torch.optim.Optimizer):
                ÊúÄÈÅ©ÂåñÊâãÊ≥ï„Ç§„É≥„Çπ„Çø„É≥„Çπ
            warmup_epochs (int):
                linear warmup„ÇíË°å„ÅÜepochÊï∞
            max_epochs (int):
                cosineÊõ≤Á∑ö„ÅÆÁµÇ‰∫Ü„Å´Áî®„ÅÑ„Çã Â≠¶Áøí„ÅÆepochÊï∞
            warmup_start_lr (float):
                linear warmup 0 epochÁõÆ„ÅÆÂ≠¶ÁøíÁéá
            eta_min (float):
                cosineÊõ≤Á∑ö„ÅÆ‰∏ãÈôê
            last_epoch (int):
                cosineÊõ≤Á∑ö„ÅÆ‰ΩçÁõ∏„Ç™„Éï„Çª„ÉÉ„Éà
        Â≠¶ÁøíÁéá„Çímax_epochs„Å´Ëá≥„Çã„Åæ„Åß„Ç≥„Çµ„Ç§„É≥Êõ≤Á∑ö„Å´Ê≤ø„Å£„Å¶„Çπ„Ç±„Ç∏„É•„Éº„É´„Åô„Çã
        epoch 0„Åã„Çâwarmup_epochs„Åæ„Åß„ÅÆÂ≠¶ÁøíÊõ≤Á∑ö„ÅØÁ∑öÂΩ¢warmup„Åå„Åã„Åã„Çã
        https://pytorch-lightning-bolts.readthedocs.io/en/stable/schedulers/warmup_cosine_annealing.html
        """
        self.warmup_epochs = warmup_epochs
        self.max_epochs = max_epochs
        self.warmup_start_lr = warmup_start_lr
        self.eta_min = eta_min
        super().__init__(optimizer, last_epoch)
        return None

    def get_lr(self):
        if self.last_epoch == 0:
            return [self.warmup_start_lr] * len(self.base_lrs)
        if self.last_epoch < self.warmup_epochs:
            return [
                group["lr"] + (base_lr - self.warmup_start_lr) / (self.warmup_epochs - 1)
                for base_lr, group in zip(self.base_lrs, self.optimizer.param_groups)
            ]
        if self.last_epoch == self.warmup_epochs:
            return self.base_lrs
        if (self.last_epoch - 1 - self.max_epochs) % (2 * (self.max_epochs - self.warmup_epochs)) == 0:
            return [
                group["lr"] + (base_lr - self.eta_min) * (1 - math.cos(math.pi / (self.max_epochs - self.warmup_epochs))) / 2
                for base_lr, group in zip(self.base_lrs, self.optimizer.param_groups)
            ]

        return [
            (1 + math.cos(math.pi * (self.last_epoch - self.warmup_epochs) / (self.max_epochs - self.warmup_epochs)))
            / (1 + math.cos(math.pi * (self.last_epoch - self.warmup_epochs - 1) / (self.max_epochs - self.warmup_epochs)))
            * (group["lr"] - self.eta_min)
            + self.eta_min
            for group in self.optimizer.param_groups
        ]
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import math\n\n\nclass CosineAnnealingLR(torch.optim.lr_scheduler._LRScheduler):\n    def __init__(\n        self,\n        optimizer: torch.optim.Optimizer,\n        warmup_epochs: int,\n        max_epochs: int,\n        warmup_start_lr: float = 0.00001,\n        eta_min: float = 0.00001,\n        last_epoch: int = -1,\n    ):\n        """\n        Args:\n            optimizer (torch.optim.Optimizer):\n                ÊúÄÈÅ©ÂåñÊâãÊ≥ï„Ç§„É≥„Çπ„Çø„É≥„Çπ\n            warmup_epochs (int):\n                linear warmup„ÇíË°å„ÅÜepochÊï∞\n            max_epochs (int):\n                cosineÊõ≤Á∑ö„ÅÆÁµÇ‰∫Ü„Å´Áî®„ÅÑ„Çã Â≠¶Áøí„ÅÆepochÊï∞\n            warmup_start_lr (float):\n                linear warmup 0 epochÁõÆ„ÅÆÂ≠¶ÁøíÁéá\n            eta_min (float):\n                cosineÊõ≤Á∑ö„ÅÆ‰∏ãÈôê\n            last_epoch (int):\n                cosineÊõ≤Á∑ö„ÅÆ‰ΩçÁõ∏„Ç™„Éï„Çª„ÉÉ„Éà\n        Â≠¶ÁøíÁéá„Çímax_epochs„Å´Ëá≥„Çã„Åæ„Åß„Ç≥„Çµ„Ç§„É≥Êõ≤Á∑ö„Å´Ê≤ø„Å£„Å¶„Çπ„Ç±„Ç∏„É•„Éº„É´„Åô„Çã\n        epoch 0„Åã„Çâwarmup_epochs„Åæ„Åß„ÅÆÂ≠¶ÁøíÊõ≤Á∑ö„ÅØÁ∑öÂΩ¢warmup„Åå„Åã„Åã„Çã\n        https://pytorch-lightning-bolts.readthedocs.io/en/stable/schedulers/warmup_cosine_annealing.html\n        """\n        self.warmup_epochs = warmup_epochs\n        self.max_epochs = max_epochs\n        self.warmup_start_lr = warmup_start_lr\n        self.eta_min = eta_min\n        super().__init__(optimizer, last_epoch)\n        return None\n\n    def get_lr(self):\n        if self.last_epoch == 0:\n            return [self.warmup_start_lr] * len(self.base_lrs)\n        if self.last_epoch < self.warmup_epochs:\n            return [\n                group["lr"] + (base_lr - self.warmup_start_lr) / (self.warmup_epochs - 1)\n                for base_lr, group in zip(self.base_lrs, self.optimizer.param_groups)\n            ]\n        if self.last_epoch == self.warmup_epochs:\n            return self.base_lrs\n        if (self.last_epoch - 1 - self.max_epochs) % (2 * (self.max_epochs - self.warmup_epochs)) == 0:\n            return [\n                group["lr"] + (base_lr - self.eta_min) * (1 - math.cos(math.pi / (self.max_epochs - self.warmup_epochs))) / 2\n                for base_lr, group in zip(self.base_lrs, self.optimizer.param_groups)\n            ]\n\n        return [\n            (1 + math.cos(math.pi * (self.last_epoch - self.warmup_epochs) / (self.max_epochs - self.warmup_epochs)))\n            / (1 + math.cos(math.pi * (self.last_epoch - self.warmup_epochs - 1) / (self.max_epochs - self.warmup_epochs)))\n            * (group["lr"] - self.eta_min)\n            + self.eta_min\n            for group in self.optimizer.param_groups\n        ]', 'execution_count': 9}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
import matplotlib.pyplot as plt
sche=CosineAnnealingLR(torch.optim.Adam([torch.nn.Parameter(torch.tensor(1.0))]),warmup_epochs=10,max_epochs=100)
sche.last_epoch=999
lrs=[]
for i in range(300):
    sche.step()
    lrs.append(sche.get_lr()[0])
plt.plot(lrs)
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import matplotlib.pyplot as plt\nsche=CosineAnnealingLR(torch.optim.Adam([torch.nn.Parameter(torch.tensor(1.0))]),warmup_epochs=10,max_epochs=100)\nsche.last_epoch=999\nlrs=[]\nfor i in range(300):\n    sche.step()\n    lrs.append(sche.get_lr()[0])\nplt.plot(lrs)', 'execution_count': 10}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '/home/rain/exp_env/.venv/lib/python3.11/site-packages/torch/optim/lr_scheduler.py:143: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate\n  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "\n'}
[NbConvertApp] msg_type: execute_result
[NbConvertApp] content: {'data': {'text/plain': '[<matplotlib.lines.Line2D at 0x7efcdda98d10>]'}, 'metadata': {}, 'execution_count': 10}
[NbConvertApp] msg_type: display_data
[NbConvertApp] content: {'data': {'text/plain': '<Figure size 640x480 with 1 Axes>', 'image/png': ''}, 'metadata': {}, 'transient': {}}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
import torch
class CossineLRDecay(torch.optim.lr_scheduler._LRScheduler):
    def __init__(self,optimizer,lr_max,lr_min,max_steps,warmup_steps):
        self.lr_max=lr_max
        self.lr_min=lr_min
        self.max_steps=max_steps
        self.warmup_steps=warmup_steps
        super().__init__(optimizer)
    def get_lr(self):
        if self.last_epoch<self.warmup_steps:
            return [self.lr_max/self.warmup_steps*(self.last_epoch+1) for _ in self.optimizer.param_groups]
        elif self.last_epoch<self.max_steps:
            return [self.lr_min+(self.lr_max-self.lr_min)*(1+math.cos(math.pi*(self.last_epoch-self.warmup_steps)/(self.max_steps-self.warmup_steps)))/2 for _ in self.optimizer.param_groups]
        else:
            return [self.lr_min for _ in self.optimizer.param_groups]

sche=CossineLRDecay(torch.optim.Adam([torch.nn.Parameter(torch.tensor(1.0))]),lr_max=0.1,lr_min=0.0001,max_steps=1000,warmup_steps=0)
sche.last_epoch=999
lrs=[]
for i in range(1000):
    sche.step()
    lrs.append(sche.get_lr()[0])
plt.plot(lrs)
    
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import torch\nclass CossineLRDecay(torch.optim.lr_scheduler._LRScheduler):\n    def __init__(self,optimizer,lr_max,lr_min,max_steps,warmup_steps):\n        self.lr_max=lr_max\n        self.lr_min=lr_min\n        self.max_steps=max_steps\n        self.warmup_steps=warmup_steps\n        super().__init__(optimizer)\n    def get_lr(self):\n        if self.last_epoch<self.warmup_steps:\n            return [self.lr_max/self.warmup_steps*(self.last_epoch+1) for _ in self.optimizer.param_groups]\n        elif self.last_epoch<self.max_steps:\n            return [self.lr_min+(self.lr_max-self.lr_min)*(1+math.cos(math.pi*(self.last_epoch-self.warmup_steps)/(self.max_steps-self.warmup_steps)))/2 for _ in self.optimizer.param_groups]\n        else:\n            return [self.lr_min for _ in self.optimizer.param_groups]\n\nsche=CossineLRDecay(torch.optim.Adam([torch.nn.Parameter(torch.tensor(1.0))]),lr_max=0.1,lr_min=0.0001,max_steps=1000,warmup_steps=0)\nsche.last_epoch=999\nlrs=[]\nfor i in range(1000):\n    sche.step()\n    lrs.append(sche.get_lr()[0])\nplt.plot(lrs)\n    ', 'execution_count': 11}
[NbConvertApp] msg_type: execute_result
[NbConvertApp] content: {'data': {'text/plain': '[<matplotlib.lines.Line2D at 0x7efcdd9ff150>]'}, 'metadata': {}, 'execution_count': 11}
[NbConvertApp] msg_type: display_data
[NbConvertApp] content: {'data': {'text/plain': '<Figure size 640x480 with 1 Axes>', 'image/png': ''}, 'metadata': {}, 'transient': {}}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
import matplotlib.pyplot as plt
import math
max_lr = 6e-4
min_lr = max_lr * 0.1
warmup_steps = 0
max_steps = 840 # 19,073 steps is ~1 epoch, if data is 10B tokens and batch size 0.5M tokens
def get_lr(it):
    # 1) linear warmup for warmup_iters steps
    if it < warmup_steps:
        return max_lr * (it+1) / warmup_steps
    # 2) if it > lr_decay_iters, return min learning rate
    if it > max_steps:
        return min_lr
    # 3) in between, use cosine decay down to min learning rate
    decay_ratio = (it - warmup_steps) / (max_steps - warmup_steps)
    assert 0 <= decay_ratio <= 1
    coeff = 0.5 * (1.0 + math.cos(math.pi * decay_ratio)) # coeff starts at 1 and goes to 0
    return min_lr + coeff * (max_lr - min_lr)

plt.plot([get_lr(i) for i in range(840)])
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import matplotlib.pyplot as plt\nimport math\nmax_lr = 6e-4\nmin_lr = max_lr * 0.1\nwarmup_steps = 0\nmax_steps = 840 # 19,073 steps is ~1 epoch, if data is 10B tokens and batch size 0.5M tokens\ndef get_lr(it):\n    # 1) linear warmup for warmup_iters steps\n    if it < warmup_steps:\n        return max_lr * (it+1) / warmup_steps\n    # 2) if it > lr_decay_iters, return min learning rate\n    if it > max_steps:\n        return min_lr\n    # 3) in between, use cosine decay down to min learning rate\n    decay_ratio = (it - warmup_steps) / (max_steps - warmup_steps)\n    assert 0 <= decay_ratio <= 1\n    coeff = 0.5 * (1.0 + math.cos(math.pi * decay_ratio)) # coeff starts at 1 and goes to 0\n    return min_lr + coeff * (max_lr - min_lr)\n\nplt.plot([get_lr(i) for i in range(840)])', 'execution_count': 12}
[NbConvertApp] msg_type: execute_result
[NbConvertApp] content: {'data': {'text/plain': '[<matplotlib.lines.Line2D at 0x7efcdd9092d0>]'}, 'metadata': {}, 'execution_count': 12}
[NbConvertApp] msg_type: display_data
[NbConvertApp] content: {'data': {'text/plain': '<Figure size 640x480 with 1 Axes>', 'image/png': ''}, 'metadata': {}, 'transient': {}}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:


@dataclass
class TransformerTrainGenKeys(BaseTrainGenKeys):
    src_ids='src_ids'
    tgt_ids='tgt_ids'
    encoder_mask='encoder_mask'
    decoder_mask='decoder_mask'
    sampled_src='sampled_src'
    sampled_tgt='sampled_tgt'
    sampled_pred='sampled_pred'
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': "\n\n@dataclass\nclass TransformerTrainGenKeys(BaseTrainGenKeys):\n    src_ids='src_ids'\n    tgt_ids='tgt_ids'\n    encoder_mask='encoder_mask'\n    decoder_mask='decoder_mask'\n    sampled_src='sampled_src'\n    sampled_tgt='sampled_tgt'\n    sampled_pred='sampled_pred'", 'execution_count': 13}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
import sys
import wandb

class TrainLogger:
    def __init__(self,cfg):
        self.test_scores=[]
        wandb.init(project='transformer-jesc',config=cfg)
    
    def write(self,g):
        wandb.log({BaseTrainGenKeys.epoch:g[BaseTrainGenKeys.epoch],BaseTrainGenKeys.train_loss:g[BaseTrainGenKeys.train_loss],BaseTrainGenKeys.test_loss:g[BaseTrainGenKeys.test_loss],TransformerTrainGenKeys.sampled_src:g[TransformerTrainGenKeys.sampled_src],TransformerTrainGenKeys.sampled_tgt:g[TransformerTrainGenKeys.sampled_tgt],TransformerTrainGenKeys.sampled_pred:g[TransformerTrainGenKeys.sampled_pred]})


    def log(self, epoch, batch_step, max_batch_step, train_loss, test_loss: float|None):
        if batch_step!=0:
            print("\033[F\033[K",end="")
            print("\033[F\033[K",end="")
        if max_batch_step==0:
            max_batch_step=1
        progress=['=' for _ in range(int(batch_step/max_batch_step*50))]
        progress.append('>')
        progress.extend([' ' for _ in range(50-len(progress))])
        train_loss = f'{train_loss:.4f}'
        if test_loss is None:
            print(f'epoch:{epoch} batch_step:{batch_step}/{max_batch_step} [{"".join(progress)}] train_loss:{train_loss}')
        else:
            self.test_scores.append(test_loss)
            test_loss = f'{test_loss:.4f}'
            print(f'epoch:{epoch} batch_step:{batch_step}/{max_batch_step} [{"".join(progress)}] train_loss:{train_loss} test_loss:{test_loss}')

[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import sys\nimport wandb\n\nclass TrainLogger:\n    def __init__(self,cfg):\n        self.test_scores=[]\n        wandb.init(project=\'transformer-jesc\',config=cfg)\n    \n    def write(self,g):\n        wandb.log({BaseTrainGenKeys.epoch:g[BaseTrainGenKeys.epoch],BaseTrainGenKeys.train_loss:g[BaseTrainGenKeys.train_loss],BaseTrainGenKeys.test_loss:g[BaseTrainGenKeys.test_loss],TransformerTrainGenKeys.sampled_src:g[TransformerTrainGenKeys.sampled_src],TransformerTrainGenKeys.sampled_tgt:g[TransformerTrainGenKeys.sampled_tgt],TransformerTrainGenKeys.sampled_pred:g[TransformerTrainGenKeys.sampled_pred]})\n\n\n    def log(self, epoch, batch_step, max_batch_step, train_loss, test_loss: float|None):\n        if batch_step!=0:\n            print("\\033[F\\033[K",end="")\n            print("\\033[F\\033[K",end="")\n        if max_batch_step==0:\n            max_batch_step=1\n        progress=[\'=\' for _ in range(int(batch_step/max_batch_step*50))]\n        progress.append(\'>\')\n        progress.extend([\' \' for _ in range(50-len(progress))])\n        train_loss = f\'{train_loss:.4f}\'\n        if test_loss is None:\n            print(f\'epoch:{epoch} batch_step:{batch_step}/{max_batch_step} [{"".join(progress)}] train_loss:{train_loss}\')\n        else:\n            self.test_scores.append(test_loss)\n            test_loss = f\'{test_loss:.4f}\'\n            print(f\'epoch:{epoch} batch_step:{batch_step}/{max_batch_step} [{"".join(progress)}] train_loss:{train_loss} test_loss:{test_loss}\')\n', 'execution_count': 14}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:

from adabelief_pytorch import AdaBelief
class SchedulerType:
    CosineAnnealingLR="CosineAnnealingLR"
    CosineAnnealingWarmRestarts="CosineAnnealingWarmRestarts"
    CosineAnnealingWarmUp="CosineAnnealingWarmUp"
    CossineLRDecay="CossineLRDecay"
    StepLR="StepLR"
    NoneType="NoneType"
@dataclass
class CFG(BaseTrainPipelineConfig):
    batch_size:int=128
    skip=13920
    max_epochs:int|None=1
    is_running:bool=True
    debug:bool=False
    max_len: int = maker.src_tokenizer.max_length
    lr: float =0.0007 #0.0010466176# 2.79936e-05 #2.79936e-05*6#
    min_lr: float = 2.79936e-05
    accum_iter: int = 512//128//2
    device: str = 'cuda' if torch.cuda.is_available() else 'cpu'
    embedding_dim: int = 512
    hidden_dim: int = 512
    num_heads: int = 12
    num_blocks: int = 3
    encode_vocab_size: int = maker.src_tokenizer.tokenizer.get_vocab().keys().__len__()
    decode_vocab_size: int = maker.tgt_tokenizer.tokenizer.get_vocab().keys().__len__()
    pad_idx:int=maker.src_tokenizer.tokenizer.pad_token_id # type: ignore
    tokenizer=maker
    optimizer=torch.optim.AdamW#AdaBelief#torch.optim.RAdam#
    default_dtype=torch.bfloat16
    eval_steps:int=60
    scheduler=SchedulerType.CossineLRDecay
    warmup_percent=0.0015

def cfg_to_dict(cfg):
    return {k:v for k,v in cfg.__dict__.items() if not k.startswith('_')}
logger=TrainLogger(cfg_to_dict(CFG()))
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': '\nfrom adabelief_pytorch import AdaBelief\nclass SchedulerType:\n    CosineAnnealingLR="CosineAnnealingLR"\n    CosineAnnealingWarmRestarts="CosineAnnealingWarmRestarts"\n    CosineAnnealingWarmUp="CosineAnnealingWarmUp"\n    CossineLRDecay="CossineLRDecay"\n    StepLR="StepLR"\n    NoneType="NoneType"\n@dataclass\nclass CFG(BaseTrainPipelineConfig):\n    batch_size:int=128\n    skip=13920\n    max_epochs:int|None=1\n    is_running:bool=True\n    debug:bool=False\n    max_len: int = maker.src_tokenizer.max_length\n    lr: float =0.0007 #0.0010466176# 2.79936e-05 #2.79936e-05*6#\n    min_lr: float = 2.79936e-05\n    accum_iter: int = 512//128//2\n    device: str = \'cuda\' if torch.cuda.is_available() else \'cpu\'\n    embedding_dim: int = 512\n    hidden_dim: int = 512\n    num_heads: int = 12\n    num_blocks: int = 3\n    encode_vocab_size: int = maker.src_tokenizer.tokenizer.get_vocab().keys().__len__()\n    decode_vocab_size: int = maker.tgt_tokenizer.tokenizer.get_vocab().keys().__len__()\n    pad_idx:int=maker.src_tokenizer.tokenizer.pad_token_id # type: ignore\n    tokenizer=maker\n    optimizer=torch.optim.AdamW#AdaBelief#torch.optim.RAdam#\n    default_dtype=torch.bfloat16\n    eval_steps:int=60\n    scheduler=SchedulerType.CossineLRDecay\n    warmup_percent=0.0015\n\ndef cfg_to_dict(cfg):\n    return {k:v for k,v in cfg.__dict__.items() if not k.startswith(\'_\')}\nlogger=TrainLogger(cfg_to_dict(CFG()))', 'execution_count': 15}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: Currently logged in as: \x1b[33myama-yeah\x1b[0m (\x1b[33mgrad-exp\x1b[0m). Use \x1b[1m`wandb login --relogin`\x1b[0m to force relogin\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: wandb version 0.17.4 is available!  To upgrade, please run:\n\x1b[34m\x1b[1mwandb\x1b[0m:  $ pip install wandb --upgrade\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: Tracking run with wandb version 0.17.3\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: Run data is saved locally in \x1b[35m\x1b[1m/home/rain/exp_env/src/work/translate/wandb/run-20240704_131003-m44eoa2g\x1b[0m\n\x1b[34m\x1b[1mwandb\x1b[0m: Run \x1b[1m`wandb offline`\x1b[0m to turn off syncing.\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: Syncing run \x1b[33mfearless-shape-113\x1b[0m\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: ‚≠êÔ∏è View project at \x1b[34m\x1b[4mhttps://wandb.ai/grad-exp/transformer-jesc\x1b[0m\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: üöÄ View run at \x1b[34m\x1b[4mhttps://wandb.ai/grad-exp/transformer-jesc/runs/m44eoa2g\x1b[0m\n'}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:


class TransformerTrainPipeline(BaseTrainPipeline):
    def __init__(self,train_src,train_tgt,test_src,test_tgt,config:CFG=CFG()):
        super().__init__(config)
        self.encoder=transformer.Encoder(
            how_many_block=config.num_blocks,
            how_many_heads=config.num_heads,
            vocab_size=config.encode_vocab_size,
            embedding_dim=config.embedding_dim,
            hidden_dim=config.hidden_dim,
            pad_idx= config.pad_idx,
            max_seq_len=config.max_len,
            layer_norm_eps=1e-6,
        ).to(config.device)
        self.decoder=transformer.Decoder(
            how_many_block=config.num_blocks,
            how_many_heads=config.num_heads,
            vocab_size=config.decode_vocab_size,
            embedding_dim=config.embedding_dim,
            hidden_dim=config.hidden_dim,
            pad_idx= config.pad_idx,
            max_seq_len=config.max_len,
            layer_norm_eps=1e-6,
        ).to(config.device)
        self.optimizer=config.optimizer(list(self.encoder.parameters())[1:]+list(self.decoder.parameters())[1:],lr=config.lr,betas=(0.9,0.95),eps=1e-8,fused=True)#,eps=1e-16, betas=(0.9,0.999), weight_decouple = True, rectify = True)
        self.optimizer2=torch.optim.RAdam(list(self.encoder.parameters())[0:1]+list(self.decoder.parameters())[0:1],lr=config.min_lr,betas=(0.9,0.95),eps=1e-8)
        if config.scheduler==SchedulerType.CosineAnnealingLR:
            self.scheduler=torch.optim.lr_scheduler.CosineAnnealingLR(self.optimizer,int(2000/config.batch_size*20*5/config.accum_iter),config.min_lr)
        elif config.scheduler==SchedulerType.CosineAnnealingWarmUp:
            self.scheduler=CosineAnnealingLR(self.optimizer,int(2000/config.batch_size*10*5/config.accum_iter),int(2000/config.batch_size*20*5/config.accum_iter),config.min_lr,config.min_lr)
        elif config.scheduler==SchedulerType.CossineLRDecay:
            self.scheduler=CossineLRDecay(self.optimizer,lr_max=config.lr,lr_min=config.min_lr,max_steps=len(train_src)//config.batch_size*config.max_epochs//config.accum_iter,warmup_steps=int(len(train_src)//config.batch_size*config.max_epochs//config.accum_iter*config.warmup_percent))
        elif config.scheduler==SchedulerType.StepLR:
            self.scheduler=torch.optim.lr_scheduler.StepLR(self.optimizer,step_size=1,gamma=6)
        if config.scheduler!=SchedulerType.NoneType:
            self.scheduler.last_step=self.config.skip-1
        #self.scheduler=CossineLRDecay(self.optimizer,lr_max=config.lr,lr_min=2.79936e-05,max_steps=840//2,warmup_steps=0)
        #self.scheduler=torch.optim.lr_scheduler.StepLR(self.optimizer,step_size=1,gamma=6)
        ## type: ignore
        self.config:CFG
            
    def id_mask_split(self,G):
        for g in G:
            g[TransformerTrainGenKeys.src_ids]=g[BaseTrainGenKeys.batch_x][0].squeeze(1)
            #print(maker.src_tokenizer.tokenizer.decode(g[BaseTrainGenKeys.batch_x][0].squeeze(1)[0].tolist()))
            g[TransformerTrainGenKeys.encoder_mask]=g[BaseTrainGenKeys.batch_x][1].squeeze(1)
            g[TransformerTrainGenKeys.tgt_ids]=g[BaseTrainGenKeys.batch_y][0].squeeze(1)
            #print(maker.tgt_tokenizer.tokenizer.decode(g[BaseTrainGenKeys.batch_y][0].squeeze(1)[0].tolist()))
            g[TransformerTrainGenKeys.decoder_mask]=g[BaseTrainGenKeys.batch_y][1].squeeze(1)
            yield g
    
    def forward(self,G):
        self.encoder.train()
        self.decoder.train()
        for g in G:
            with torch.set_grad_enabled(True):
                loss=None
                self.optimizer.zero_grad()
                y=self.encoder(g[TransformerTrainGenKeys.src_ids].to(self.config.device),g[TransformerTrainGenKeys.encoder_mask].to(self.config.device))
                y=self.decoder(g[TransformerTrainGenKeys.tgt_ids].to(self.config.device),y,g[TransformerTrainGenKeys.decoder_mask].to(self.config.device))
                tgt_ids=g[TransformerTrainGenKeys.tgt_ids][:,1:].to(self.config.device)
                # one hot encode
                y=y[:,:-1]
                tgt_ids=tgt_ids.contiguous().view(-1)
                y=y.contiguous().view(-1,self.config.decode_vocab_size)
                loss = torch.nn.CrossEntropyLoss(
                    ignore_index=self.config.pad_idx
                )(y, tgt_ids)/self.config.accum_iter
                del tgt_ids,y
                gc.collect()
                torch.cuda.empty_cache()
                loss.backward()
                if g[BaseTrainGenKeys.batch_step] % self.config.accum_iter == 0 or g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:
                    # print(loss.item())
                    torch.nn.utils.clip_grad_norm_(list(self.encoder.parameters())+list(self.decoder.parameters()), 1.0)
                    self.optimizer.step()
                    self.optimizer2.step()
                    if self.scheduler is not None and self.config.scheduler!=SchedulerType.StepLR:
                        self.scheduler.step()
                
                g[BaseTrainGenKeys.train_loss]=loss.item()*self.config.accum_iter
                
            yield g
    def test(self,G):
        for g in G:
            
            with torch.no_grad():
                self.encoder.eval()
                self.decoder.eval()
                src_ids=g[TransformerTrainGenKeys.src_ids].to(self.config.device)
                encoder_mask=g[TransformerTrainGenKeys.encoder_mask].to(self.config.device)
                tgt_ids=g[TransformerTrainGenKeys.tgt_ids].to(self.config.device)
                decoder_mask=g[TransformerTrainGenKeys.decoder_mask].to(self.config.device)
                y=self.encoder(src_ids,encoder_mask)
                y=self.decoder(tgt_ids,y,decoder_mask)
                tgt_ids=tgt_ids[:,1:]
                y=y[:,:-1]
                if g[BaseTrainGenKeys.batch_step]==g[BaseTrainGenKeys.max_batch_step]:
                    how_many=3
                    src_text=maker.src_tokenizer.tokenizer.batch_decode(src_ids[:how_many].tolist())
                    src_text=[text.replace('[PAD]','') for text in src_text]
                    tgt_text=maker.tgt_tokenizer.tokenizer.batch_decode(tgt_ids[:how_many].tolist())
                    tgt_text=[text.replace('[PAD]','') for text in tgt_text]
                    pred_text=maker.tgt_tokenizer.tokenizer.batch_decode(torch.argmax(y,dim=-1)[:how_many].tolist())
                    pred_text=[text.replace('[PAD]','') for text in pred_text]
                    #EOS„Åæ„Åß„ÅÆ„ÅøË°®Á§∫
                    pred_text=[text[:text.find('[EOS]')+5] for text in pred_text]
                    print(src_text)
                    print(tgt_text)
                    print(pred_text)
                    g[TransformerTrainGenKeys.sampled_src]=src_text[0]
                    g[TransformerTrainGenKeys.sampled_tgt]=tgt_text[0]
                    g[TransformerTrainGenKeys.sampled_pred]=pred_text[0]
                tgt_ids=tgt_ids.contiguous().view(-1)
                y=y.contiguous().view(-1,self.config.decode_vocab_size)
                loss = torch.nn.CrossEntropyLoss(ignore_index=self.config.pad_idx)(y, tgt_ids).cpu()
                g[BaseTrainGenKeys.test_loss]=loss.detach().item()
            yield g
    def run_after_epoch(self,G):
        for g in G:
            logger.log(g[BaseTrainGenKeys.epoch],g[BaseTrainGenKeys.batch_step],g[BaseTrainGenKeys.max_batch_step],g[BaseTrainGenKeys.train_loss],g.get(BaseTrainGenKeys.test_loss,None))
            if g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:
                if self.config.scheduler==SchedulerType.StepLR:
                    self.scheduler.step()
                    print(self.optimizer.param_groups[0]['lr'])
                yield g
    def run_eval_each_step(self,G):
        train_loss=0
        cnt=0
        for g in G:
            train_loss+=g[BaseTrainGenKeys.train_loss]
            cnt+=1
            logger.log(g[BaseTrainGenKeys.epoch],g[BaseTrainGenKeys.batch_step],g[BaseTrainGenKeys.max_batch_step],g[BaseTrainGenKeys.train_loss],g.get(BaseTrainGenKeys.test_loss,None))
            if g[BaseTrainGenKeys.batch_step]% (self.config.accum_iter*self.config.eval_steps)==0 or g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:
                g[BaseTrainGenKeys.train_loss]=train_loss/cnt
                train_loss=0
                cnt=0
                yield g
    def run_after_test(self,G):
        loss=0
        for g in G:
            if g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:
                g[BaseTrainGenKeys.test_loss]+=loss
                g[BaseTrainGenKeys.test_loss]/=g[BaseTrainGenKeys.max_batch_step]
                loss=0
                yield g
            else:
                loss+=g[BaseTrainGenKeys.test_loss]
    def reduce_mem_gen(self,G):
        for g in G:
            torch.cuda.empty_cache()
            gc.collect()
            yield g
config=CFG()
#test
pipeline=TransformerTrainPipeline(train_x,train_y,test_x,test_y,config)
# pipeline.encoder.embedding.load_state_dict(torch.load('/home/rain/exp_env/src/work/translate/model/fasttext_jp.pth'))
# pipeline.decoder.embedding.load_state_dict(torch.load('/home/rain/exp_env/src/work/translate/model/fasttext_en.pth'))
pipeline.encoder.load_state_dict(torch.load('encoder.pth'))
pipeline.decoder.load_state_dict(torch.load('decoder.pth'))
# compile
pipeline.encoder=torch.compile(pipeline.encoder,mode="reduce-overhead")
pipeline.decoder=torch.compile(pipeline.decoder,mode="reduce-overhead")
# pipeline.encoder.embedding.requires_grad=False
# pipeline.decoder.embedding.requires_grad=False

[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': '\n\nclass TransformerTrainPipeline(BaseTrainPipeline):\n    def __init__(self,train_src,train_tgt,test_src,test_tgt,config:CFG=CFG()):\n        super().__init__(config)\n        self.encoder=transformer.Encoder(\n            how_many_block=config.num_blocks,\n            how_many_heads=config.num_heads,\n            vocab_size=config.encode_vocab_size,\n            embedding_dim=config.embedding_dim,\n            hidden_dim=config.hidden_dim,\n            pad_idx= config.pad_idx,\n            max_seq_len=config.max_len,\n            layer_norm_eps=1e-6,\n        ).to(config.device)\n        self.decoder=transformer.Decoder(\n            how_many_block=config.num_blocks,\n            how_many_heads=config.num_heads,\n            vocab_size=config.decode_vocab_size,\n            embedding_dim=config.embedding_dim,\n            hidden_dim=config.hidden_dim,\n            pad_idx= config.pad_idx,\n            max_seq_len=config.max_len,\n            layer_norm_eps=1e-6,\n        ).to(config.device)\n        self.optimizer=config.optimizer(list(self.encoder.parameters())[1:]+list(self.decoder.parameters())[1:],lr=config.lr,betas=(0.9,0.95),eps=1e-8,fused=True)#,eps=1e-16, betas=(0.9,0.999), weight_decouple = True, rectify = True)\n        self.optimizer2=torch.optim.RAdam(list(self.encoder.parameters())[0:1]+list(self.decoder.parameters())[0:1],lr=config.min_lr,betas=(0.9,0.95),eps=1e-8)\n        if config.scheduler==SchedulerType.CosineAnnealingLR:\n            self.scheduler=torch.optim.lr_scheduler.CosineAnnealingLR(self.optimizer,int(2000/config.batch_size*20*5/config.accum_iter),config.min_lr)\n        elif config.scheduler==SchedulerType.CosineAnnealingWarmUp:\n            self.scheduler=CosineAnnealingLR(self.optimizer,int(2000/config.batch_size*10*5/config.accum_iter),int(2000/config.batch_size*20*5/config.accum_iter),config.min_lr,config.min_lr)\n        elif config.scheduler==SchedulerType.CossineLRDecay:\n            self.scheduler=CossineLRDecay(self.optimizer,lr_max=config.lr,lr_min=config.min_lr,max_steps=len(train_src)//config.batch_size*config.max_epochs//config.accum_iter,warmup_steps=int(len(train_src)//config.batch_size*config.max_epochs//config.accum_iter*config.warmup_percent))\n        elif config.scheduler==SchedulerType.StepLR:\n            self.scheduler=torch.optim.lr_scheduler.StepLR(self.optimizer,step_size=1,gamma=6)\n        if config.scheduler!=SchedulerType.NoneType:\n            self.scheduler.last_step=self.config.skip-1\n        #self.scheduler=CossineLRDecay(self.optimizer,lr_max=config.lr,lr_min=2.79936e-05,max_steps=840//2,warmup_steps=0)\n        #self.scheduler=torch.optim.lr_scheduler.StepLR(self.optimizer,step_size=1,gamma=6)\n        ## type: ignore\n        self.config:CFG\n            \n    def id_mask_split(self,G):\n        for g in G:\n            g[TransformerTrainGenKeys.src_ids]=g[BaseTrainGenKeys.batch_x][0].squeeze(1)\n            #print(maker.src_tokenizer.tokenizer.decode(g[BaseTrainGenKeys.batch_x][0].squeeze(1)[0].tolist()))\n            g[TransformerTrainGenKeys.encoder_mask]=g[BaseTrainGenKeys.batch_x][1].squeeze(1)\n            g[TransformerTrainGenKeys.tgt_ids]=g[BaseTrainGenKeys.batch_y][0].squeeze(1)\n            #print(maker.tgt_tokenizer.tokenizer.decode(g[BaseTrainGenKeys.batch_y][0].squeeze(1)[0].tolist()))\n            g[TransformerTrainGenKeys.decoder_mask]=g[BaseTrainGenKeys.batch_y][1].squeeze(1)\n            yield g\n    \n    def forward(self,G):\n        self.encoder.train()\n        self.decoder.train()\n        for g in G:\n            with torch.set_grad_enabled(True):\n                loss=None\n                self.optimizer.zero_grad()\n                y=self.encoder(g[TransformerTrainGenKeys.src_ids].to(self.config.device),g[TransformerTrainGenKeys.encoder_mask].to(self.config.device))\n                y=self.decoder(g[TransformerTrainGenKeys.tgt_ids].to(self.config.device),y,g[TransformerTrainGenKeys.decoder_mask].to(self.config.device))\n                tgt_ids=g[TransformerTrainGenKeys.tgt_ids][:,1:].to(self.config.device)\n                # one hot encode\n                y=y[:,:-1]\n                tgt_ids=tgt_ids.contiguous().view(-1)\n                y=y.contiguous().view(-1,self.config.decode_vocab_size)\n                loss = torch.nn.CrossEntropyLoss(\n                    ignore_index=self.config.pad_idx\n                )(y, tgt_ids)/self.config.accum_iter\n                del tgt_ids,y\n                gc.collect()\n                torch.cuda.empty_cache()\n                loss.backward()\n                if g[BaseTrainGenKeys.batch_step] % self.config.accum_iter == 0 or g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:\n                    # print(loss.item())\n                    torch.nn.utils.clip_grad_norm_(list(self.encoder.parameters())+list(self.decoder.parameters()), 1.0)\n                    self.optimizer.step()\n                    self.optimizer2.step()\n                    if self.scheduler is not None and self.config.scheduler!=SchedulerType.StepLR:\n                        self.scheduler.step()\n                \n                g[BaseTrainGenKeys.train_loss]=loss.item()*self.config.accum_iter\n                \n            yield g\n    def test(self,G):\n        for g in G:\n            \n            with torch.no_grad():\n                self.encoder.eval()\n                self.decoder.eval()\n                src_ids=g[TransformerTrainGenKeys.src_ids].to(self.config.device)\n                encoder_mask=g[TransformerTrainGenKeys.encoder_mask].to(self.config.device)\n                tgt_ids=g[TransformerTrainGenKeys.tgt_ids].to(self.config.device)\n                decoder_mask=g[TransformerTrainGenKeys.decoder_mask].to(self.config.device)\n                y=self.encoder(src_ids,encoder_mask)\n                y=self.decoder(tgt_ids,y,decoder_mask)\n                tgt_ids=tgt_ids[:,1:]\n                y=y[:,:-1]\n                if g[BaseTrainGenKeys.batch_step]==g[BaseTrainGenKeys.max_batch_step]:\n                    how_many=3\n                    src_text=maker.src_tokenizer.tokenizer.batch_decode(src_ids[:how_many].tolist())\n                    src_text=[text.replace(\'[PAD]\',\'\') for text in src_text]\n                    tgt_text=maker.tgt_tokenizer.tokenizer.batch_decode(tgt_ids[:how_many].tolist())\n                    tgt_text=[text.replace(\'[PAD]\',\'\') for text in tgt_text]\n                    pred_text=maker.tgt_tokenizer.tokenizer.batch_decode(torch.argmax(y,dim=-1)[:how_many].tolist())\n                    pred_text=[text.replace(\'[PAD]\',\'\') for text in pred_text]\n                    #EOS„Åæ„Åß„ÅÆ„ÅøË°®Á§∫\n                    pred_text=[text[:text.find(\'[EOS]\')+5] for text in pred_text]\n                    print(src_text)\n                    print(tgt_text)\n                    print(pred_text)\n                    g[TransformerTrainGenKeys.sampled_src]=src_text[0]\n                    g[TransformerTrainGenKeys.sampled_tgt]=tgt_text[0]\n                    g[TransformerTrainGenKeys.sampled_pred]=pred_text[0]\n                tgt_ids=tgt_ids.contiguous().view(-1)\n                y=y.contiguous().view(-1,self.config.decode_vocab_size)\n                loss = torch.nn.CrossEntropyLoss(ignore_index=self.config.pad_idx)(y, tgt_ids).cpu()\n                g[BaseTrainGenKeys.test_loss]=loss.detach().item()\n            yield g\n    def run_after_epoch(self,G):\n        for g in G:\n            logger.log(g[BaseTrainGenKeys.epoch],g[BaseTrainGenKeys.batch_step],g[BaseTrainGenKeys.max_batch_step],g[BaseTrainGenKeys.train_loss],g.get(BaseTrainGenKeys.test_loss,None))\n            if g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:\n                if self.config.scheduler==SchedulerType.StepLR:\n                    self.scheduler.step()\n                    print(self.optimizer.param_groups[0][\'lr\'])\n                yield g\n    def run_eval_each_step(self,G):\n        train_loss=0\n        cnt=0\n        for g in G:\n            train_loss+=g[BaseTrainGenKeys.train_loss]\n            cnt+=1\n            logger.log(g[BaseTrainGenKeys.epoch],g[BaseTrainGenKeys.batch_step],g[BaseTrainGenKeys.max_batch_step],g[BaseTrainGenKeys.train_loss],g.get(BaseTrainGenKeys.test_loss,None))\n            if g[BaseTrainGenKeys.batch_step]% (self.config.accum_iter*self.config.eval_steps)==0 or g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:\n                g[BaseTrainGenKeys.train_loss]=train_loss/cnt\n                train_loss=0\n                cnt=0\n                yield g\n    def run_after_test(self,G):\n        loss=0\n        for g in G:\n            if g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:\n                g[BaseTrainGenKeys.test_loss]+=loss\n                g[BaseTrainGenKeys.test_loss]/=g[BaseTrainGenKeys.max_batch_step]\n                loss=0\n                yield g\n            else:\n                loss+=g[BaseTrainGenKeys.test_loss]\n    def reduce_mem_gen(self,G):\n        for g in G:\n            torch.cuda.empty_cache()\n            gc.collect()\n            yield g\nconfig=CFG()\n#test\npipeline=TransformerTrainPipeline(train_x,train_y,test_x,test_y,config)\n# pipeline.encoder.embedding.load_state_dict(torch.load(\'/home/rain/exp_env/src/work/translate/model/fasttext_jp.pth\'))\n# pipeline.decoder.embedding.load_state_dict(torch.load(\'/home/rain/exp_env/src/work/translate/model/fasttext_en.pth\'))\npipeline.encoder.load_state_dict(torch.load(\'encoder.pth\'))\npipeline.decoder.load_state_dict(torch.load(\'decoder.pth\'))\n# compile\npipeline.encoder=torch.compile(pipeline.encoder,mode="reduce-overhead")\npipeline.decoder=torch.compile(pipeline.decoder,mode="reduce-overhead")\n# pipeline.encoder.embedding.requires_grad=False\n# pipeline.decoder.embedding.requires_grad=False\n', 'execution_count': 16}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
cfg_to_dict(pipeline.config)
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'cfg_to_dict(pipeline.config)', 'execution_count': 17}
[NbConvertApp] msg_type: execute_result
[NbConvertApp] content: {'data': {'text/plain': "{'batch_size': 128,\n 'max_epochs': 1,\n 'is_running': True,\n 'debug': False,\n 'max_len': 256,\n 'lr': 0.0007,\n 'min_lr': 2.79936e-05,\n 'accum_iter': 2,\n 'device': 'cuda',\n 'embedding_dim': 512,\n 'hidden_dim': 512,\n 'num_heads': 12,\n 'num_blocks': 3,\n 'encode_vocab_size': 30004,\n 'decode_vocab_size': 30004,\n 'pad_idx': 30003,\n 'eval_steps': 60}"}, 'metadata': {}, 'execution_count': 17}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
g=pipeline.train_loop_gen(train_dataset)
g=pipeline.id_mask_split(g)
g=pipeline.forward(g)
g=pipeline.reduce_mem_gen(g)
g=pipeline.run_eval_each_step(g)
# g=[{}]
g=pipeline.batch_gen(g,test_dataset,scale=1)
g=pipeline.id_mask_split(g)
g=pipeline.test(g)
g=pipeline.reduce_mem_gen(g)
g=pipeline.run_after_test(g)
best=100
for i in g:
    if i[TransformerTrainGenKeys.test_loss]<best:
        best=i[TransformerTrainGenKeys.test_loss]
        torch.save(pipeline.encoder.state_dict(), 'encoder1.pth')
        torch.save(pipeline.decoder.state_dict(), 'decoder1.pth')
    logger.log(i[BaseTrainGenKeys.epoch],i[BaseTrainGenKeys.batch_step],i[BaseTrainGenKeys.max_batch_step],i[BaseTrainGenKeys.train_loss],i.get(BaseTrainGenKeys.test_loss,None))
    logger.write(i)
    pipeline.encoder.train()
    pipeline.decoder.train()
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': "g=pipeline.train_loop_gen(train_dataset)\ng=pipeline.id_mask_split(g)\ng=pipeline.forward(g)\ng=pipeline.reduce_mem_gen(g)\ng=pipeline.run_eval_each_step(g)\n# g=[{}]\ng=pipeline.batch_gen(g,test_dataset,scale=1)\ng=pipeline.id_mask_split(g)\ng=pipeline.test(g)\ng=pipeline.reduce_mem_gen(g)\ng=pipeline.run_after_test(g)\nbest=100\nfor i in g:\n    if i[TransformerTrainGenKeys.test_loss]<best:\n        best=i[TransformerTrainGenKeys.test_loss]\n        torch.save(pipeline.encoder.state_dict(), 'encoder1.pth')\n        torch.save(pipeline.decoder.state_dict(), 'decoder1.pth')\n    logger.log(i[BaseTrainGenKeys.epoch],i[BaseTrainGenKeys.batch_step],i[BaseTrainGenKeys.max_batch_step],i[BaseTrainGenKeys.train_loss],i.get(BaseTrainGenKeys.test_loss,None))\n    logger.write(i)\n    pipeline.encoder.train()\n    pipeline.decoder.train()", 'execution_count': 18}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '/home/rain/exp_env/.venv/lib/python3.11/site-packages/torch/_inductor/lowering.py:1611: UserWarning: Torchinductor does not support code generation for complex operators. Performance may be worse than eager.\n  warnings.warn(\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': "skipping cudagraphs due to ['non-cuda device in graph']\n"}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': "skipping cudagraphs due to ['non-cuda device in graph']\n"}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13921/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13922/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13923/79140 [========>                                         ] train_loss:4.0938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13924/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13925/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13926/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13927/79140 [========>                                         ] train_loss:4.1875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13928/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13929/79140 [========>                                         ] train_loss:3.9062\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13930/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13931/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13932/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13933/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13934/79140 [========>                                         ] train_loss:3.9844\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13935/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13936/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13937/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13938/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13939/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13940/79140 [========>                                         ] train_loss:3.5938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13941/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13942/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13943/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13944/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13945/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13946/79140 [========>                                         ] train_loss:4.0938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13947/79140 [========>                                         ] train_loss:3.7031\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13948/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13949/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13950/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13951/79140 [========>                                         ] train_loss:3.5625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13952/79140 [========>                                         ] train_loss:3.6562\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13953/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13954/79140 [========>                                         ] train_loss:3.6094\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13955/79140 [========>                                         ] train_loss:3.9531\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13956/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13957/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13958/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13959/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13960/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13961/79140 [========>                                         ] train_loss:3.9531\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13962/79140 [========>                                         ] train_loss:3.9062\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13963/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13964/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13965/79140 [========>                                         ] train_loss:3.6250\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13966/79140 [========>                                         ] train_loss:3.6406\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13967/79140 [========>                                         ] train_loss:3.5781\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13968/79140 [========>                                         ] train_loss:3.9844\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13969/79140 [========>                                         ] train_loss:3.7031\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13970/79140 [========>                                         ] train_loss:3.6719\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13971/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13972/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13973/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13974/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13975/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13976/79140 [========>                                         ] train_loss:3.9844\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13977/79140 [========>                                         ] train_loss:3.9219\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13978/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13979/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13980/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13981/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13982/79140 [========>                                         ] train_loss:3.9219\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13983/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13984/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13985/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13986/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13987/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13988/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13989/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13990/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13991/79140 [========>                                         ] train_loss:3.5938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13992/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13993/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13994/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13995/79140 [========>                                         ] train_loss:3.5938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13996/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13997/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13998/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13999/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14000/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14001/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14002/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14003/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14004/79140 [========>                                         ] train_loss:3.7031\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14005/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14006/79140 [========>                                         ] train_loss:3.5781\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14007/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14008/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14009/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14010/79140 [========>                                         ] train_loss:3.7656\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14011/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14012/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14013/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14014/79140 [========>                                         ] train_loss:3.9062\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14015/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14016/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14017/79140 [========>                                         ] train_loss:3.5938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14018/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14019/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14020/79140 [========>                                         ] train_loss:4.0625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14021/79140 [========>                                         ] train_loss:4.0625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14022/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14023/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14024/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14025/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14026/79140 [========>                                         ] train_loss:3.5312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14027/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14028/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14029/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14030/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14031/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14032/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14033/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14034/79140 [========>                                         ] train_loss:3.6719\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14035/79140 [========>                                         ] train_loss:3.9219\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14036/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14037/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14038/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14039/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14040/79140 [========>                                         ] train_loss:3.6562\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14041/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14042/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14043/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14044/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14045/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14046/79140 [========>                                         ] train_loss:4.1250\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14047/79140 [========>                                         ] train_loss:3.7031\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14048/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14049/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14050/79140 [========>                                         ] train_loss:3.9219\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14051/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14052/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14053/79140 [========>                                         ] train_loss:3.6406\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14054/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14055/79140 [========>                                         ] train_loss:3.6562\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14056/79140 [========>                                         ] train_loss:3.5156\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14057/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14058/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14059/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14060/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14061/79140 [========>                                         ] train_loss:4.0625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14062/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14063/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14064/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14065/79140 [========>                                         ] train_loss:3.7031\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14066/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14067/79140 [========>                                         ] train_loss:3.9062\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14068/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14069/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14070/79140 [========>                                         ] train_loss:4.3125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14071/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14072/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14073/79140 [========>                                         ] train_loss:3.9062\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14074/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14075/79140 [========>                                         ] train_loss:3.9531\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14076/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14077/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14078/79140 [========>                                         ] train_loss:3.9062\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14079/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14080/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14081/79140 [========>                                         ] train_loss:3.9531\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14082/79140 [========>                                         ] train_loss:3.9531\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14083/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14084/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14085/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14086/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14087/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14088/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14089/79140 [========>                                         ] train_loss:3.7656\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14090/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14091/79140 [========>                                         ] train_loss:4.1875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14092/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14093/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14094/79140 [========>                                         ] train_loss:4.0625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14095/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14096/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14097/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14098/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14099/79140 [========>                                         ] train_loss:4.0625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14100/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14101/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14102/79140 [========>                                         ] train_loss:3.9531\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14103/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14104/79140 [========>                                         ] train_loss:4.0938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14105/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14106/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14107/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14108/79140 [========>                                         ] train_loss:4.0625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14109/79140 [========>                                         ] train_loss:4.0938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14110/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14111/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14112/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14113/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14114/79140 [========>                                         ] train_loss:3.5938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14115/79140 [========>                                         ] train_loss:3.9844\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14116/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14117/79140 [========>                                         ] train_loss:3.9062\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14118/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14119/79140 [========>                                         ] train_loss:3.9062\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14120/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14121/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14122/79140 [========>                                         ] train_loss:4.0625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14123/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14124/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14125/79140 [========>                                         ] train_loss:4.0625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14126/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14127/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14128/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14129/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14130/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14131/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14132/79140 [========>                                         ] train_loss:3.7656\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14133/79140 [========>                                         ] train_loss:4.0938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14134/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14135/79140 [========>                                         ] train_loss:4.0625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14136/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14137/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14138/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14139/79140 [========>                                         ] train_loss:3.9844\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14140/79140 [========>                                         ] train_loss:4.1250\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14141/79140 [========>                                         ] train_loss:3.7031\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14142/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14143/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14144/79140 [========>                                         ] train_loss:4.0938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14145/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14146/79140 [========>                                         ] train_loss:3.9844\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14147/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14148/79140 [========>                                         ] train_loss:3.9219\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14149/79140 [========>                                         ] train_loss:3.9219\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14150/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14151/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14152/79140 [========>                                         ] train_loss:4.2500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14153/79140 [========>                                         ] train_loss:3.6406\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14154/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14155/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14156/79140 [========>                                         ] train_loss:3.6719\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14157/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14158/79140 [========>                                         ] train_loss:3.9531\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14159/79140 [========>                                         ] train_loss:3.9531\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14160/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: error
[NbConvertApp] content: {'traceback': ['\x1b[0;31m---------------------------------------------------------------------------\x1b[0m', '\x1b[0;31mKeyboardInterrupt\x1b[0m                         Traceback (most recent call last)', 'Cell \x1b[0;32mIn[18], line 13\x1b[0m\n\x1b[1;32m     11\x1b[0m g\x1b[38;5;241m=\x1b[39mpipeline\x1b[38;5;241m.\x1b[39mrun_after_test(g)\n\x1b[1;32m     12\x1b[0m best\x1b[38;5;241m=\x1b[39m\x1b[38;5;241m100\x1b[39m\n\x1b[0;32m---> 13\x1b[0m \x1b[38;5;28;43;01mfor\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mi\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;129;43;01min\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mg\x1b[49m\x1b[43m:\x1b[49m\n\x1b[1;32m     14\x1b[0m \x1b[43m    \x1b[49m\x1b[38;5;28;43;01mif\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mi\x1b[49m\x1b[43m[\x1b[49m\x1b[43mTransformerTrainGenKeys\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mtest_loss\x1b[49m\x1b[43m]\x1b[49m\x1b[38;5;241;43m<\x1b[39;49m\x1b[43mbest\x1b[49m\x1b[43m:\x1b[49m\n\x1b[1;32m     15\x1b[0m \x1b[43m        \x1b[49m\x1b[43mbest\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mi\x1b[49m\x1b[43m[\x1b[49m\x1b[43mTransformerTrainGenKeys\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mtest_loss\x1b[49m\x1b[43m]\x1b[49m\n', 'Cell \x1b[0;32mIn[16], line 140\x1b[0m, in \x1b[0;36mTransformerTrainPipeline.run_after_test\x1b[0;34m(self, G)\x1b[0m\n\x1b[1;32m    138\x1b[0m \x1b[38;5;28;01mdef\x1b[39;00m \x1b[38;5;21mrun_after_test\x1b[39m(\x1b[38;5;28mself\x1b[39m,G):\n\x1b[1;32m    139\x1b[0m     loss\x1b[38;5;241m=\x1b[39m\x1b[38;5;241m0\x1b[39m\n\x1b[0;32m--> 140\x1b[0m \x1b[43m    \x1b[49m\x1b[38;5;28;43;01mfor\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mg\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;129;43;01min\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mG\x1b[49m\x1b[43m:\x1b[49m\n\x1b[1;32m    141\x1b[0m \x1b[43m        \x1b[49m\x1b[38;5;28;43;01mif\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mg\x1b[49m\x1b[43m[\x1b[49m\x1b[43mBaseTrainGenKeys\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mbatch_step\x1b[49m\x1b[43m]\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;241;43m==\x1b[39;49m\x1b[43m \x1b[49m\x1b[43mg\x1b[49m\x1b[43m[\x1b[49m\x1b[43mBaseTrainGenKeys\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mmax_batch_step\x1b[49m\x1b[43m]\x1b[49m\x1b[43m:\x1b[49m\n\x1b[1;32m    142\x1b[0m \x1b[43m            \x1b[49m\x1b[43mg\x1b[49m\x1b[43m[\x1b[49m\x1b[43mBaseTrainGenKeys\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mtest_loss\x1b[49m\x1b[43m]\x1b[49m\x1b[38;5;241;43m+\x1b[39;49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mloss\x1b[49m\n', 'Cell \x1b[0;32mIn[16], line 149\x1b[0m, in \x1b[0;36mTransformerTrainPipeline.reduce_mem_gen\x1b[0;34m(self, G)\x1b[0m\n\x1b[1;32m    148\x1b[0m \x1b[38;5;28;01mdef\x1b[39;00m \x1b[38;5;21mreduce_mem_gen\x1b[39m(\x1b[38;5;28mself\x1b[39m,G):\n\x1b[0;32m--> 149\x1b[0m \x1b[43m    \x1b[49m\x1b[38;5;28;43;01mfor\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mg\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;129;43;01min\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mG\x1b[49m\x1b[43m:\x1b[49m\n\x1b[1;32m    150\x1b[0m \x1b[43m        \x1b[49m\x1b[43mtorch\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mcuda\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mempty_cache\x1b[49m\x1b[43m(\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m    151\x1b[0m \x1b[43m        \x1b[49m\x1b[43mgc\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mcollect\x1b[49m\x1b[43m(\x1b[49m\x1b[43m)\x1b[49m\n', 'Cell \x1b[0;32mIn[16], line 84\x1b[0m, in \x1b[0;36mTransformerTrainPipeline.test\x1b[0;34m(self, G)\x1b[0m\n\x1b[1;32m     83\x1b[0m \x1b[38;5;28;01mdef\x1b[39;00m \x1b[38;5;21mtest\x1b[39m(\x1b[38;5;28mself\x1b[39m,G):\n\x1b[0;32m---> 84\x1b[0m \x1b[43m    \x1b[49m\x1b[38;5;28;43;01mfor\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mg\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;129;43;01min\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mG\x1b[49m\x1b[43m:\x1b[49m\n\x1b[1;32m     86\x1b[0m \x1b[43m        \x1b[49m\x1b[38;5;28;43;01mwith\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mtorch\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mno_grad\x1b[49m\x1b[43m(\x1b[49m\x1b[43m)\x1b[49m\x1b[43m:\x1b[49m\n\x1b[1;32m     87\x1b[0m \x1b[43m            \x1b[49m\x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mencoder\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43meval\x1b[49m\x1b[43m(\x1b[49m\x1b[43m)\x1b[49m\n', 'Cell \x1b[0;32mIn[16], line 42\x1b[0m, in \x1b[0;36mTransformerTrainPipeline.id_mask_split\x1b[0;34m(self, G)\x1b[0m\n\x1b[1;32m     41\x1b[0m \x1b[38;5;28;01mdef\x1b[39;00m \x1b[38;5;21mid_mask_split\x1b[39m(\x1b[38;5;28mself\x1b[39m,G):\n\x1b[0;32m---> 42\x1b[0m \x1b[43m    \x1b[49m\x1b[38;5;28;43;01mfor\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mg\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;129;43;01min\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mG\x1b[49m\x1b[43m:\x1b[49m\n\x1b[1;32m     43\x1b[0m \x1b[43m        \x1b[49m\x1b[43mg\x1b[49m\x1b[43m[\x1b[49m\x1b[43mTransformerTrainGenKeys\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43msrc_ids\x1b[49m\x1b[43m]\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mg\x1b[49m\x1b[43m[\x1b[49m\x1b[43mBaseTrainGenKeys\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mbatch_x\x1b[49m\x1b[43m]\x1b[49m\x1b[43m[\x1b[49m\x1b[38;5;241;43m0\x1b[39;49m\x1b[43m]\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43msqueeze\x1b[49m\x1b[43m(\x1b[49m\x1b[38;5;241;43m1\x1b[39;49m\x1b[43m)\x1b[49m\n\x1b[1;32m     44\x1b[0m \x1b[43m        \x1b[49m\x1b[38;5;66;43;03m#print(maker.src_tokenizer.tokenizer.decode(g[BaseTrainGenKeys.batch_x][0].squeeze(1)[0].tolist()))\x1b[39;49;00m\n', 'Cell \x1b[0;32mIn[6], line 38\x1b[0m, in \x1b[0;36mBaseTrainPipeline.batch_gen\x1b[0;34m(self, G, dataset, scale)\x1b[0m\n\x1b[1;32m     36\x1b[0m all_step\x1b[38;5;241m=\x1b[39m\x1b[38;5;241m0\x1b[39m\n\x1b[1;32m     37\x1b[0m \x1b[38;5;28;01mfor\x1b[39;00m g \x1b[38;5;129;01min\x1b[39;00m G:\n\x1b[0;32m---> 38\x1b[0m \x1b[43m    \x1b[49m\x1b[38;5;28;43;01mfor\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mi\x1b[49m\x1b[43m,\x1b[49m\x1b[43m(\x1b[49m\x1b[43mbatch_X\x1b[49m\x1b[43m,\x1b[49m\x1b[43mbatch_y\x1b[49m\x1b[43m)\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;129;43;01min\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[38;5;28;43menumerate\x1b[39;49m\x1b[43m(\x1b[49m\x1b[43mdataloader\x1b[49m\x1b[43m)\x1b[49m\x1b[43m:\x1b[49m\n\x1b[1;32m     39\x1b[0m \x1b[43m        \x1b[49m\x1b[38;5;28;43;01mif\x1b[39;49;00m\x1b[43m \x1b[49m\x1b[43mall_step\x1b[49m\x1b[38;5;241;43m<\x1b[39;49m\x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mconfig\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mskip\x1b[49m\x1b[43m:\x1b[49m\n\x1b[1;32m     40\x1b[0m \x1b[43m            \x1b[49m\x1b[43mall_step\x1b[49m\x1b[38;5;241;43m+\x1b[39;49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[38;5;241;43m1\x1b[39;49m\n', 'File \x1b[0;32m~/exp_env/.venv/lib/python3.11/site-packages/torch/utils/data/dataloader.py:631\x1b[0m, in \x1b[0;36m_BaseDataLoaderIter.__next__\x1b[0;34m(self)\x1b[0m\n\x1b[1;32m    628\x1b[0m \x1b[38;5;28;01mif\x1b[39;00m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_sampler_iter \x1b[38;5;129;01mis\x1b[39;00m \x1b[38;5;28;01mNone\x1b[39;00m:\n\x1b[1;32m    629\x1b[0m     \x1b[38;5;66;03m# TODO(https://github.com/pytorch/pytorch/issues/76750)\x1b[39;00m\n\x1b[1;32m    630\x1b[0m     \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_reset()  \x1b[38;5;66;03m# type: ignore[call-arg]\x1b[39;00m\n\x1b[0;32m--> 631\x1b[0m data \x1b[38;5;241m=\x1b[39m \x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43m_next_data\x1b[49m\x1b[43m(\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m    632\x1b[0m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_num_yielded \x1b[38;5;241m+\x1b[39m\x1b[38;5;241m=\x1b[39m \x1b[38;5;241m1\x1b[39m\n\x1b[1;32m    633\x1b[0m \x1b[38;5;28;01mif\x1b[39;00m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_dataset_kind \x1b[38;5;241m==\x1b[39m _DatasetKind\x1b[38;5;241m.\x1b[39mIterable \x1b[38;5;129;01mand\x1b[39;00m \\\n\x1b[1;32m    634\x1b[0m         \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_IterableDataset_len_called \x1b[38;5;129;01mis\x1b[39;00m \x1b[38;5;129;01mnot\x1b[39;00m \x1b[38;5;28;01mNone\x1b[39;00m \x1b[38;5;129;01mand\x1b[39;00m \\\n\x1b[1;32m    635\x1b[0m         \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_num_yielded \x1b[38;5;241m>\x1b[39m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_IterableDataset_len_called:\n', 'File \x1b[0;32m~/exp_env/.venv/lib/python3.11/site-packages/torch/utils/data/dataloader.py:1329\x1b[0m, in \x1b[0;36m_MultiProcessingDataLoaderIter._next_data\x1b[0;34m(self)\x1b[0m\n\x1b[1;32m   1326\x1b[0m     \x1b[38;5;28;01mreturn\x1b[39;00m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_process_data(data)\n\x1b[1;32m   1328\x1b[0m \x1b[38;5;28;01massert\x1b[39;00m \x1b[38;5;129;01mnot\x1b[39;00m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_shutdown \x1b[38;5;129;01mand\x1b[39;00m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_tasks_outstanding \x1b[38;5;241m>\x1b[39m \x1b[38;5;241m0\x1b[39m\n\x1b[0;32m-> 1329\x1b[0m idx, data \x1b[38;5;241m=\x1b[39m \x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43m_get_data\x1b[49m\x1b[43m(\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m   1330\x1b[0m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_tasks_outstanding \x1b[38;5;241m-\x1b[39m\x1b[38;5;241m=\x1b[39m \x1b[38;5;241m1\x1b[39m\n\x1b[1;32m   1331\x1b[0m \x1b[38;5;28;01mif\x1b[39;00m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_dataset_kind \x1b[38;5;241m==\x1b[39m _DatasetKind\x1b[38;5;241m.\x1b[39mIterable:\n\x1b[1;32m   1332\x1b[0m     \x1b[38;5;66;03m# Check for _IterableDatasetStopIteration\x1b[39;00m\n', 'File \x1b[0;32m~/exp_env/.venv/lib/python3.11/site-packages/torch/utils/data/dataloader.py:1285\x1b[0m, in \x1b[0;36m_MultiProcessingDataLoaderIter._get_data\x1b[0;34m(self)\x1b[0m\n\x1b[1;32m   1283\x1b[0m \x1b[38;5;28;01melif\x1b[39;00m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_pin_memory:\n\x1b[1;32m   1284\x1b[0m     \x1b[38;5;28;01mwhile\x1b[39;00m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_pin_memory_thread\x1b[38;5;241m.\x1b[39mis_alive():\n\x1b[0;32m-> 1285\x1b[0m         success, data \x1b[38;5;241m=\x1b[39m \x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43m_try_get_data\x1b[49m\x1b[43m(\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m   1286\x1b[0m         \x1b[38;5;28;01mif\x1b[39;00m success:\n\x1b[1;32m   1287\x1b[0m             \x1b[38;5;28;01mreturn\x1b[39;00m data\n', 'File \x1b[0;32m~/exp_env/.venv/lib/python3.11/site-packages/torch/utils/data/dataloader.py:1133\x1b[0m, in \x1b[0;36m_MultiProcessingDataLoaderIter._try_get_data\x1b[0;34m(self, timeout)\x1b[0m\n\x1b[1;32m   1120\x1b[0m \x1b[38;5;28;01mdef\x1b[39;00m \x1b[38;5;21m_try_get_data\x1b[39m(\x1b[38;5;28mself\x1b[39m, timeout\x1b[38;5;241m=\x1b[39m_utils\x1b[38;5;241m.\x1b[39mMP_STATUS_CHECK_INTERVAL):\n\x1b[1;32m   1121\x1b[0m     \x1b[38;5;66;03m# Tries to fetch data from `self._data_queue` once for a given timeout.\x1b[39;00m\n\x1b[1;32m   1122\x1b[0m     \x1b[38;5;66;03m# This can also be used as inner loop of fetching without timeout, with\x1b[39;00m\n\x1b[0;32m   (...)\x1b[0m\n\x1b[1;32m   1130\x1b[0m     \x1b[38;5;66;03m# Returns a 2-tuple:\x1b[39;00m\n\x1b[1;32m   1131\x1b[0m     \x1b[38;5;66;03m#   (bool: whether successfully get data, any: data if successful else None)\x1b[39;00m\n\x1b[1;32m   1132\x1b[0m     \x1b[38;5;28;01mtry\x1b[39;00m:\n\x1b[0;32m-> 1133\x1b[0m         data \x1b[38;5;241m=\x1b[39m \x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43m_data_queue\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mget\x1b[49m\x1b[43m(\x1b[49m\x1b[43mtimeout\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mtimeout\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m   1134\x1b[0m         \x1b[38;5;28;01mreturn\x1b[39;00m (\x1b[38;5;28;01mTrue\x1b[39;00m, data)\n\x1b[1;32m   1135\x1b[0m     \x1b[38;5;28;01mexcept\x1b[39;00m \x1b[38;5;167;01mException\x1b[39;00m \x1b[38;5;28;01mas\x1b[39;00m e:\n\x1b[1;32m   1136\x1b[0m         \x1b[38;5;66;03m# At timeout and error, we manually check whether any worker has\x1b[39;00m\n\x1b[1;32m   1137\x1b[0m         \x1b[38;5;66;03m# failed. Note that this is the only mechanism for Windows to detect\x1b[39;00m\n\x1b[1;32m   1138\x1b[0m         \x1b[38;5;66;03m# worker failures.\x1b[39;00m\n', 'File \x1b[0;32m~/.rye/py/cpython@3.11.6/lib/python3.11/queue.py:180\x1b[0m, in \x1b[0;36mQueue.get\x1b[0;34m(self, block, timeout)\x1b[0m\n\x1b[1;32m    178\x1b[0m         \x1b[38;5;28;01mif\x1b[39;00m remaining \x1b[38;5;241m<\x1b[39m\x1b[38;5;241m=\x1b[39m \x1b[38;5;241m0.0\x1b[39m:\n\x1b[1;32m    179\x1b[0m             \x1b[38;5;28;01mraise\x1b[39;00m Empty\n\x1b[0;32m--> 180\x1b[0m         \x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mnot_empty\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mwait\x1b[49m\x1b[43m(\x1b[49m\x1b[43mremaining\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m    181\x1b[0m item \x1b[38;5;241m=\x1b[39m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_get()\n\x1b[1;32m    182\x1b[0m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39mnot_full\x1b[38;5;241m.\x1b[39mnotify()\n', 'File \x1b[0;32m~/.rye/py/cpython@3.11.6/lib/python3.11/threading.py:331\x1b[0m, in \x1b[0;36mCondition.wait\x1b[0;34m(self, timeout)\x1b[0m\n\x1b[1;32m    329\x1b[0m \x1b[38;5;28;01melse\x1b[39;00m:\n\x1b[1;32m    330\x1b[0m     \x1b[38;5;28;01mif\x1b[39;00m timeout \x1b[38;5;241m>\x1b[39m \x1b[38;5;241m0\x1b[39m:\n\x1b[0;32m--> 331\x1b[0m         gotit \x1b[38;5;241m=\x1b[39m \x1b[43mwaiter\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43macquire\x1b[49m\x1b[43m(\x1b[49m\x1b[38;5;28;43;01mTrue\x1b[39;49;00m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[43mtimeout\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m    332\x1b[0m     \x1b[38;5;28;01melse\x1b[39;00m:\n\x1b[1;32m    333\x1b[0m         gotit \x1b[38;5;241m=\x1b[39m waiter\x1b[38;5;241m.\x1b[39macquire(\x1b[38;5;28;01mFalse\x1b[39;00m)\n', '\x1b[0;31mKeyboardInterrupt\x1b[0m: '], 'ename': 'KeyboardInterrupt', 'evalue': ''}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
next(g)
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'next(g)', 'execution_count': 19}
[NbConvertApp] msg_type: error
[NbConvertApp] content: {'traceback': ['\x1b[0;31m---------------------------------------------------------------------------\x1b[0m', '\x1b[0;31mStopIteration\x1b[0m                             Traceback (most recent call last)', 'Cell \x1b[0;32mIn[19], line 1\x1b[0m\n\x1b[0;32m----> 1\x1b[0m \x1b[38;5;28;43mnext\x1b[39;49m\x1b[43m(\x1b[49m\x1b[43mg\x1b[49m\x1b[43m)\x1b[49m\n', '\x1b[0;31mStopIteration\x1b[0m: '], 'ename': 'StopIteration', 'evalue': ''}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
pipeline.encoder.state_dict()
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'pipeline.encoder.state_dict()', 'execution_count': 20}
[NbConvertApp] ERROR | Kernel died while waiting for execute reply.
[NbConvertApp] Destroying zmq context for <jupyter_client.asynchronous.client.AsyncKernelClient object at 0x7f6d09e230d0>
Traceback (most recent call last):
  File "/home/rain/exp_env/.venv/bin/jupyter-nbconvert", line 8, in <module>
    sys.exit(main())
             ^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/jupyter_core/application.py", line 283, in launch_instance
    super().launch_instance(argv=argv, **kwargs)
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/traitlets/config/application.py", line 1075, in launch_instance
    app.start()
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 420, in start
    self.convert_notebooks()
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 597, in convert_notebooks
    self.convert_single_notebook(notebook_filename)
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 563, in convert_single_notebook
    output, resources = self.export_single_notebook(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 487, in export_single_notebook
    output, resources = self.exporter.from_filename(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 201, in from_filename
    return self.from_file(f, resources=resources, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 220, in from_file
    return self.from_notebook_node(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/exporters/notebook.py", line 36, in from_notebook_node
    nb_copy, resources = super().from_notebook_node(nb, resources, **kw)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 154, in from_notebook_node
    nb_copy, resources = self._preprocess(nb_copy, resources)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 353, in _preprocess
    nbc, resc = preprocessor(nbc, resc)
                ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/preprocessors/base.py", line 48, in __call__
    return self.preprocess(nb, resources)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/preprocessors/execute.py", line 103, in preprocess
    self.preprocess_cell(cell, resources, index)
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/preprocessors/execute.py", line 124, in preprocess_cell
    cell = self.execute_cell(cell, index, store_history=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/.rye/py/cpython@3.11.6/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbclient/client.py", line 1009, in async_execute_cell
    raise DeadKernelError("Kernel died") from None
nbclient.exceptions.DeadKernelError: Kernel died
[NbConvertApp] Searching ['/home/rain/exp_env/.venv/etc/jupyter', '/home/rain/.jupyter', '/usr/local/etc/jupyter', '/etc/jupyter'] for config files
[NbConvertApp] Looking for jupyter_config in /etc/jupyter
[NbConvertApp] Looking for jupyter_config in /usr/local/etc/jupyter
[NbConvertApp] Looking for jupyter_config in /home/rain/.jupyter
[NbConvertApp] Looking for jupyter_config in /home/rain/exp_env/.venv/etc/jupyter
[NbConvertApp] Looking for jupyter_nbconvert_config in /etc/jupyter
[NbConvertApp] Looking for jupyter_nbconvert_config in /usr/local/etc/jupyter
[NbConvertApp] Looking for jupyter_nbconvert_config in /home/rain/.jupyter
[NbConvertApp] Looking for jupyter_nbconvert_config in /home/rain/exp_env/.venv/etc/jupyter
[NbConvertApp] Looping through config variables with prefix "JUPYTER_NBCONVERT"
[NbConvertApp] Converting notebook /home/rain/exp_env/src/work/translate/trans.ipynb to notebook
[NbConvertApp] Notebook name is 'trans'
[NbConvertApp] Applying preprocessor: ExecutePreprocessor
[NbConvertApp] Instantiating kernel 'Python 3 (ipykernel)' with kernel provisioner: local-provisioner
[NbConvertApp] Starting kernel: ['/home/rain/exp_env/.venv/bin/python', '-m', 'ipykernel_launcher', '-f', '/tmp/tmpkq5xza5v.json', '--HistoryManager.hist_file=:memory:']
[NbConvertApp] Connecting to: tcp://127.0.0.1:40347
[NbConvertApp] connecting iopub channel to tcp://127.0.0.1:37957
[NbConvertApp] Connecting to: tcp://127.0.0.1:37957
[NbConvertApp] connecting shell channel to tcp://127.0.0.1:50233
[NbConvertApp] Connecting to: tcp://127.0.0.1:50233
[NbConvertApp] connecting stdin channel to tcp://127.0.0.1:33757
[NbConvertApp] Connecting to: tcp://127.0.0.1:33757
[NbConvertApp] connecting heartbeat channel to tcp://127.0.0.1:39143
[NbConvertApp] connecting control channel to tcp://127.0.0.1:40347
[NbConvertApp] Connecting to: tcp://127.0.0.1:40347
[NbConvertApp] Executing cell:
import pandas as pd
from exp_env.transformers.models import transformer
import sentencepiece as spm
import torch
from dataclasses import dataclass
import numpy as np
import gc
#default„Åßbf16„Çí‰Ωø„ÅÜ„Çà„ÅÜ„Å´„Åô„Çã
torch.set_default_dtype(torch.bfloat16)
torch.backends.cudnn.benchmark = True
# torch.backends.cudnn.allow_tf32 = True
dev_mode = False
import random
from exp_env.utils.utils import fix_seed
fix_seed(42)
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import pandas as pd\nfrom exp_env.transformers.models import transformer\nimport sentencepiece as spm\nimport torch\nfrom dataclasses import dataclass\nimport numpy as np\nimport gc\n#default„Åßbf16„Çí‰Ωø„ÅÜ„Çà„ÅÜ„Å´„Åô„Çã\ntorch.set_default_dtype(torch.bfloat16)\ntorch.backends.cudnn.benchmark = True\n# torch.backends.cudnn.allow_tf32 = True\ndev_mode = False\nimport random\nfrom exp_env.utils.utils import fix_seed\nfix_seed(42)', 'execution_count': 1}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
from tokenizers.implementations import SentencePieceUnigramTokenizer
from transformers import PreTrainedTokenizerFast
import os
os.environ["TOKENIZERS_PARALLELISM"] = "false"
def load_tokenizer(model_name):
    tokenizer = SentencePieceUnigramTokenizer.from_spm(model_name)
    return PreTrainedTokenizerFast(tokenizer_object=tokenizer._tokenizer, pad_token='[PAD]', bos_token='[BOS]', eos_token='[EOS]', unk_token='[UNK]')

jp_tokenizer = load_tokenizer('tokenizer/jesc_jp.model')
en_tokenizer = load_tokenizer('tokenizer/jesc_en.model')
tokend=jp_tokenizer(text=['„Åì„Çì„Å´„Å°„ÅØüòÉ'],  truncation=True, padding='max_length' , max_length=10, return_tensors='pt')
print(jp_tokenizer.decode(tokend['input_ids'][0]))
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'from tokenizers.implementations import SentencePieceUnigramTokenizer\nfrom transformers import PreTrainedTokenizerFast\nimport os\nos.environ["TOKENIZERS_PARALLELISM"] = "false"\ndef load_tokenizer(model_name):\n    tokenizer = SentencePieceUnigramTokenizer.from_spm(model_name)\n    return PreTrainedTokenizerFast(tokenizer_object=tokenizer._tokenizer, pad_token=\'[PAD]\', bos_token=\'[BOS]\', eos_token=\'[EOS]\', unk_token=\'[UNK]\')\n\njp_tokenizer = load_tokenizer(\'tokenizer/jesc_jp.model\')\nen_tokenizer = load_tokenizer(\'tokenizer/jesc_en.model\')\ntokend=jp_tokenizer(text=[\'„Åì„Çì„Å´„Å°„ÅØüòÉ\'],  truncation=True, padding=\'max_length\' , max_length=10, return_tensors=\'pt\')\nprint(jp_tokenizer.decode(tokend[\'input_ids\'][0]))', 'execution_count': 2}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '/home/rain/exp_env/.venv/lib/python3.11/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '„Åì„Çì„Å´„Å°„ÅØ<0xF0><0x9F><0x98><0x83>[PAD][PAD][PAD][PAD][PAD]\n'}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
train_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/all/concat",sep="\t",header=None)#.sample(frac=0.14)
if dev_mode:
    train_df = train_df.sample(2000)
train_x = train_df[1].values.tolist()
train_y = train_df[0].values.tolist()
train_y = ['[BOS] ' + text + ' [EOS]' for text in train_y]
test_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/cleaned_jesc/test",sep="\t",header=None)
test_x = test_df[1].values.tolist()
test_y = test_df[0].values.tolist()
test_y = ['[BOS] ' + text + ' [EOS]' for text in test_y]
dev_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/cleaned_jesc/dev",sep="\t",header=None)
dev_x = dev_df[1].values.tolist()
dev_y = dev_df[0].values.tolist()
dev_y = ['[BOS] ' + text + ' [EOS]' for text in dev_y]

test_x = test_x+dev_x
test_y = test_y+dev_y

[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'train_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/all/concat",sep="\\t",header=None)#.sample(frac=0.14)\nif dev_mode:\n    train_df = train_df.sample(2000)\ntrain_x = train_df[1].values.tolist()\ntrain_y = train_df[0].values.tolist()\ntrain_y = [\'[BOS] \' + text + \' [EOS]\' for text in train_y]\ntest_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/cleaned_jesc/test",sep="\\t",header=None)\ntest_x = test_df[1].values.tolist()\ntest_y = test_df[0].values.tolist()\ntest_y = [\'[BOS] \' + text + \' [EOS]\' for text in test_y]\ndev_df = pd.read_table("/home/rain/exp_env/src/work/translate/data/cleaned_jesc/dev",sep="\\t",header=None)\ndev_x = dev_df[1].values.tolist()\ndev_y = dev_df[0].values.tolist()\ndev_y = [\'[BOS] \' + text + \' [EOS]\' for text in dev_y]\n\ntest_x = test_x+dev_x\ntest_y = test_y+dev_y\n', 'execution_count': 3}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
class Masker:
    def __init__(self, device):
        self.device = device
    @staticmethod
    @torch.jit.script
    def _subsequent_mask(x: torch.Tensor) -> torch.Tensor:
        batch_size = x.size(0)
        max_len = x.size(1)
        return torch.tril(torch.ones(batch_size, max_len, max_len)).eq(0).to('cpu')
    @staticmethod
    @torch.jit.script
    def _pad_mask(mask: torch.Tensor) -> torch.Tensor:
        return mask.eq(0).unsqueeze(1).repeat(1, mask.size(1), 1).to('cpu')
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': "class Masker:\n    def __init__(self, device):\n        self.device = device\n    @staticmethod\n    @torch.jit.script\n    def _subsequent_mask(x: torch.Tensor) -> torch.Tensor:\n        batch_size = x.size(0)\n        max_len = x.size(1)\n        return torch.tril(torch.ones(batch_size, max_len, max_len)).eq(0).to('cpu')\n    @staticmethod\n    @torch.jit.script\n    def _pad_mask(mask: torch.Tensor) -> torch.Tensor:\n        return mask.eq(0).unsqueeze(1).repeat(1, mask.size(1), 1).to('cpu')", 'execution_count': 4}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
from typing import Iterator
from exp_env.data.data_maker_base import DataMaker, DataMakerSpec

@dataclass
class SpmTokenizerSpec(DataMakerSpec):
    model_name: str
    max_length: int

class SpmTokenizer(DataMaker):
    def __init__(self, spec: SpmTokenizerSpec):
        self.tokenizer = load_tokenizer(spec.model_name)
        self.max_length = spec.max_length

    def make(self, data: list[str]) -> tuple[torch.Tensor, torch.Tensor]:
        tokenized=self.tokenizer(data,  truncation=True, padding='max_length' , max_length=self.max_length, return_tensors='pt')
        return tokenized['input_ids'], tokenized['attention_mask'] # type: ignore
    
class TransformerTrainDataMaker(DataMaker):
    def __init__(self, src_spec: SpmTokenizerSpec, tgt_spec: SpmTokenizerSpec, masker: Masker):
        self.src_tokenizer = SpmTokenizer(src_spec)
        self.tgt_tokenizer = SpmTokenizer(tgt_spec)
        self.masker = masker
    @torch.no_grad()
    def make(self, src_texts: list[str], tgt_texts: list[str],is_train:bool=False) -> tuple[Iterator[tuple[torch.Tensor, torch.Tensor]], Iterator[tuple[torch.Tensor, torch.Tensor]]]:
        src_ids, encoder_mask = self.src_tokenizer.make(src_texts)
        encoder_mask = self.masker._pad_mask(encoder_mask)
        tgt_ids, decoder_mask = self.tgt_tokenizer.make(tgt_texts)
        decoder_mask = self.masker._pad_mask(decoder_mask)
        if is_train:
            seq_mask = self.masker._subsequent_mask(tgt_ids)
            decoder_mask = torch.logical_or(
                seq_mask,
                decoder_mask,
            )
        src=(src_ids, encoder_mask)
        tgt=(tgt_ids, decoder_mask)
        return src, tgt # type: ignore
max_length = 256
maker=TransformerTrainDataMaker(SpmTokenizerSpec('tokenizer/jesc_jp.model', max_length), SpmTokenizerSpec('tokenizer/jesc_en.model', max_length), Masker('cpu'))
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': "from typing import Iterator\nfrom exp_env.data.data_maker_base import DataMaker, DataMakerSpec\n\n@dataclass\nclass SpmTokenizerSpec(DataMakerSpec):\n    model_name: str\n    max_length: int\n\nclass SpmTokenizer(DataMaker):\n    def __init__(self, spec: SpmTokenizerSpec):\n        self.tokenizer = load_tokenizer(spec.model_name)\n        self.max_length = spec.max_length\n\n    def make(self, data: list[str]) -> tuple[torch.Tensor, torch.Tensor]:\n        tokenized=self.tokenizer(data,  truncation=True, padding='max_length' , max_length=self.max_length, return_tensors='pt')\n        return tokenized['input_ids'], tokenized['attention_mask'] # type: ignore\n    \nclass TransformerTrainDataMaker(DataMaker):\n    def __init__(self, src_spec: SpmTokenizerSpec, tgt_spec: SpmTokenizerSpec, masker: Masker):\n        self.src_tokenizer = SpmTokenizer(src_spec)\n        self.tgt_tokenizer = SpmTokenizer(tgt_spec)\n        self.masker = masker\n    @torch.no_grad()\n    def make(self, src_texts: list[str], tgt_texts: list[str],is_train:bool=False) -> tuple[Iterator[tuple[torch.Tensor, torch.Tensor]], Iterator[tuple[torch.Tensor, torch.Tensor]]]:\n        src_ids, encoder_mask = self.src_tokenizer.make(src_texts)\n        encoder_mask = self.masker._pad_mask(encoder_mask)\n        tgt_ids, decoder_mask = self.tgt_tokenizer.make(tgt_texts)\n        decoder_mask = self.masker._pad_mask(decoder_mask)\n        if is_train:\n            seq_mask = self.masker._subsequent_mask(tgt_ids)\n            decoder_mask = torch.logical_or(\n                seq_mask,\n                decoder_mask,\n            )\n        src=(src_ids, encoder_mask)\n        tgt=(tgt_ids, decoder_mask)\n        return src, tgt # type: ignore\nmax_length = 256\nmaker=TransformerTrainDataMaker(SpmTokenizerSpec('tokenizer/jesc_jp.model', max_length), SpmTokenizerSpec('tokenizer/jesc_en.model', max_length), Masker('cpu'))", 'execution_count': 5}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
from torch.utils import data as data

@dataclass
class BaseTrainPipelineConfig:
    batch_size:int=64
    max_epochs:int|None=2
    skip=0
    is_running:bool=True
    debug:bool=False
@dataclass
class BaseTrainGenKeys:
    epoch='epoch'
    train_loss='train_loss'
    test_loss='test_loss'
    batch_x='batch_x'
    batch_y='batch_y'
    batch_step='batch_step'
    max_batch_step='max_batch_step'

class BaseTrainPipeline:
    def __init__(self,config:BaseTrainPipelineConfig):
        self.config=config
    def epoch_gen(self):
        i=0
        while True:
            yield {BaseTrainGenKeys.epoch:i}
            i+=1
            if self.config.max_epochs is not None:
                if i>=self.config.max_epochs:
                    break
            if not self.config.is_running:
                break

    def batch_gen(self,G,dataset,scale=1,no_skip=False):
        dataloader=data.DataLoader(dataset,batch_size=self.config.batch_size*scale,shuffle=True,num_workers=6,pin_memory=True)
        all_step=0
        for g in G:
            for i,(batch_X,batch_y) in enumerate(dataloader):
                if all_step<self.config.skip and not no_skip:
                    all_step+=1
                    continue
                g[BaseTrainGenKeys.batch_x]=batch_X
                g[BaseTrainGenKeys.batch_y]=batch_y
                g[BaseTrainGenKeys.batch_step]=i+1
                g[BaseTrainGenKeys.max_batch_step]=len(dataloader)
                all_step+=1
                yield g
                if self.config.debug:
                    break
                gc.collect()
    
    def train_loop_gen(self,train_dataset):
        g=self.epoch_gen()
        g=self.batch_gen(g,train_dataset)
        return g
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': "from torch.utils import data as data\n\n@dataclass\nclass BaseTrainPipelineConfig:\n    batch_size:int=64\n    max_epochs:int|None=2\n    skip=0\n    is_running:bool=True\n    debug:bool=False\n@dataclass\nclass BaseTrainGenKeys:\n    epoch='epoch'\n    train_loss='train_loss'\n    test_loss='test_loss'\n    batch_x='batch_x'\n    batch_y='batch_y'\n    batch_step='batch_step'\n    max_batch_step='max_batch_step'\n\nclass BaseTrainPipeline:\n    def __init__(self,config:BaseTrainPipelineConfig):\n        self.config=config\n    def epoch_gen(self):\n        i=0\n        while True:\n            yield {BaseTrainGenKeys.epoch:i}\n            i+=1\n            if self.config.max_epochs is not None:\n                if i>=self.config.max_epochs:\n                    break\n            if not self.config.is_running:\n                break\n\n    def batch_gen(self,G,dataset,scale=1,no_skip=False):\n        dataloader=data.DataLoader(dataset,batch_size=self.config.batch_size*scale,shuffle=True,num_workers=6,pin_memory=True)\n        all_step=0\n        for g in G:\n            for i,(batch_X,batch_y) in enumerate(dataloader):\n                if all_step<self.config.skip and not no_skip:\n                    all_step+=1\n                    continue\n                g[BaseTrainGenKeys.batch_x]=batch_X\n                g[BaseTrainGenKeys.batch_y]=batch_y\n                g[BaseTrainGenKeys.batch_step]=i+1\n                g[BaseTrainGenKeys.max_batch_step]=len(dataloader)\n                all_step+=1\n                yield g\n                if self.config.debug:\n                    break\n                gc.collect()\n    \n    def train_loop_gen(self,train_dataset):\n        g=self.epoch_gen()\n        g=self.batch_gen(g,train_dataset)\n        return g", 'execution_count': 6}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:


class TransformerTrainDataLoader(data.Dataset):
    def __init__(self, data_maker: TransformerTrainDataMaker, src_texts: list[str], tgt_texts: list[str],is_train:bool=False):
        self.data_maker = data_maker
        self.src_texts = src_texts
        self.tgt_texts = tgt_texts
        self.is_train=is_train

    def __len__(self):
        return len(self.src_texts)

    def __getitem__(self, idx):
        return self.data_maker.make(self.src_texts[idx], self.tgt_texts[idx],is_train=self.is_train)

train_dataset = TransformerTrainDataLoader(maker, train_x, train_y,is_train=True)
test_dataset = TransformerTrainDataLoader(maker, test_x, test_y,is_train=False)
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': '\n\nclass TransformerTrainDataLoader(data.Dataset):\n    def __init__(self, data_maker: TransformerTrainDataMaker, src_texts: list[str], tgt_texts: list[str],is_train:bool=False):\n        self.data_maker = data_maker\n        self.src_texts = src_texts\n        self.tgt_texts = tgt_texts\n        self.is_train=is_train\n\n    def __len__(self):\n        return len(self.src_texts)\n\n    def __getitem__(self, idx):\n        return self.data_maker.make(self.src_texts[idx], self.tgt_texts[idx],is_train=self.is_train)\n\ntrain_dataset = TransformerTrainDataLoader(maker, train_x, train_y,is_train=True)\ntest_dataset = TransformerTrainDataLoader(maker, test_x, test_y,is_train=False)', 'execution_count': 7}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Skipping non-executing cell 7
[NbConvertApp] Executing cell:
len(train_x)//128
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'len(train_x)//128', 'execution_count': 8}
[NbConvertApp] msg_type: execute_result
[NbConvertApp] content: {'data': {'text/plain': '79139'}, 'metadata': {}, 'execution_count': 8}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
import math


class CosineAnnealingLR(torch.optim.lr_scheduler._LRScheduler):
    def __init__(
        self,
        optimizer: torch.optim.Optimizer,
        warmup_epochs: int,
        max_epochs: int,
        warmup_start_lr: float = 0.00001,
        eta_min: float = 0.00001,
        last_epoch: int = -1,
    ):
        """
        Args:
            optimizer (torch.optim.Optimizer):
                ÊúÄÈÅ©ÂåñÊâãÊ≥ï„Ç§„É≥„Çπ„Çø„É≥„Çπ
            warmup_epochs (int):
                linear warmup„ÇíË°å„ÅÜepochÊï∞
            max_epochs (int):
                cosineÊõ≤Á∑ö„ÅÆÁµÇ‰∫Ü„Å´Áî®„ÅÑ„Çã Â≠¶Áøí„ÅÆepochÊï∞
            warmup_start_lr (float):
                linear warmup 0 epochÁõÆ„ÅÆÂ≠¶ÁøíÁéá
            eta_min (float):
                cosineÊõ≤Á∑ö„ÅÆ‰∏ãÈôê
            last_epoch (int):
                cosineÊõ≤Á∑ö„ÅÆ‰ΩçÁõ∏„Ç™„Éï„Çª„ÉÉ„Éà
        Â≠¶ÁøíÁéá„Çímax_epochs„Å´Ëá≥„Çã„Åæ„Åß„Ç≥„Çµ„Ç§„É≥Êõ≤Á∑ö„Å´Ê≤ø„Å£„Å¶„Çπ„Ç±„Ç∏„É•„Éº„É´„Åô„Çã
        epoch 0„Åã„Çâwarmup_epochs„Åæ„Åß„ÅÆÂ≠¶ÁøíÊõ≤Á∑ö„ÅØÁ∑öÂΩ¢warmup„Åå„Åã„Åã„Çã
        https://pytorch-lightning-bolts.readthedocs.io/en/stable/schedulers/warmup_cosine_annealing.html
        """
        self.warmup_epochs = warmup_epochs
        self.max_epochs = max_epochs
        self.warmup_start_lr = warmup_start_lr
        self.eta_min = eta_min
        super().__init__(optimizer, last_epoch)
        return None

    def get_lr(self):
        if self.last_epoch == 0:
            return [self.warmup_start_lr] * len(self.base_lrs)
        if self.last_epoch < self.warmup_epochs:
            return [
                group["lr"] + (base_lr - self.warmup_start_lr) / (self.warmup_epochs - 1)
                for base_lr, group in zip(self.base_lrs, self.optimizer.param_groups)
            ]
        if self.last_epoch == self.warmup_epochs:
            return self.base_lrs
        if (self.last_epoch - 1 - self.max_epochs) % (2 * (self.max_epochs - self.warmup_epochs)) == 0:
            return [
                group["lr"] + (base_lr - self.eta_min) * (1 - math.cos(math.pi / (self.max_epochs - self.warmup_epochs))) / 2
                for base_lr, group in zip(self.base_lrs, self.optimizer.param_groups)
            ]

        return [
            (1 + math.cos(math.pi * (self.last_epoch - self.warmup_epochs) / (self.max_epochs - self.warmup_epochs)))
            / (1 + math.cos(math.pi * (self.last_epoch - self.warmup_epochs - 1) / (self.max_epochs - self.warmup_epochs)))
            * (group["lr"] - self.eta_min)
            + self.eta_min
            for group in self.optimizer.param_groups
        ]
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import math\n\n\nclass CosineAnnealingLR(torch.optim.lr_scheduler._LRScheduler):\n    def __init__(\n        self,\n        optimizer: torch.optim.Optimizer,\n        warmup_epochs: int,\n        max_epochs: int,\n        warmup_start_lr: float = 0.00001,\n        eta_min: float = 0.00001,\n        last_epoch: int = -1,\n    ):\n        """\n        Args:\n            optimizer (torch.optim.Optimizer):\n                ÊúÄÈÅ©ÂåñÊâãÊ≥ï„Ç§„É≥„Çπ„Çø„É≥„Çπ\n            warmup_epochs (int):\n                linear warmup„ÇíË°å„ÅÜepochÊï∞\n            max_epochs (int):\n                cosineÊõ≤Á∑ö„ÅÆÁµÇ‰∫Ü„Å´Áî®„ÅÑ„Çã Â≠¶Áøí„ÅÆepochÊï∞\n            warmup_start_lr (float):\n                linear warmup 0 epochÁõÆ„ÅÆÂ≠¶ÁøíÁéá\n            eta_min (float):\n                cosineÊõ≤Á∑ö„ÅÆ‰∏ãÈôê\n            last_epoch (int):\n                cosineÊõ≤Á∑ö„ÅÆ‰ΩçÁõ∏„Ç™„Éï„Çª„ÉÉ„Éà\n        Â≠¶ÁøíÁéá„Çímax_epochs„Å´Ëá≥„Çã„Åæ„Åß„Ç≥„Çµ„Ç§„É≥Êõ≤Á∑ö„Å´Ê≤ø„Å£„Å¶„Çπ„Ç±„Ç∏„É•„Éº„É´„Åô„Çã\n        epoch 0„Åã„Çâwarmup_epochs„Åæ„Åß„ÅÆÂ≠¶ÁøíÊõ≤Á∑ö„ÅØÁ∑öÂΩ¢warmup„Åå„Åã„Åã„Çã\n        https://pytorch-lightning-bolts.readthedocs.io/en/stable/schedulers/warmup_cosine_annealing.html\n        """\n        self.warmup_epochs = warmup_epochs\n        self.max_epochs = max_epochs\n        self.warmup_start_lr = warmup_start_lr\n        self.eta_min = eta_min\n        super().__init__(optimizer, last_epoch)\n        return None\n\n    def get_lr(self):\n        if self.last_epoch == 0:\n            return [self.warmup_start_lr] * len(self.base_lrs)\n        if self.last_epoch < self.warmup_epochs:\n            return [\n                group["lr"] + (base_lr - self.warmup_start_lr) / (self.warmup_epochs - 1)\n                for base_lr, group in zip(self.base_lrs, self.optimizer.param_groups)\n            ]\n        if self.last_epoch == self.warmup_epochs:\n            return self.base_lrs\n        if (self.last_epoch - 1 - self.max_epochs) % (2 * (self.max_epochs - self.warmup_epochs)) == 0:\n            return [\n                group["lr"] + (base_lr - self.eta_min) * (1 - math.cos(math.pi / (self.max_epochs - self.warmup_epochs))) / 2\n                for base_lr, group in zip(self.base_lrs, self.optimizer.param_groups)\n            ]\n\n        return [\n            (1 + math.cos(math.pi * (self.last_epoch - self.warmup_epochs) / (self.max_epochs - self.warmup_epochs)))\n            / (1 + math.cos(math.pi * (self.last_epoch - self.warmup_epochs - 1) / (self.max_epochs - self.warmup_epochs)))\n            * (group["lr"] - self.eta_min)\n            + self.eta_min\n            for group in self.optimizer.param_groups\n        ]', 'execution_count': 9}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
import matplotlib.pyplot as plt
sche=CosineAnnealingLR(torch.optim.Adam([torch.nn.Parameter(torch.tensor(1.0))]),warmup_epochs=10,max_epochs=100)
sche.last_epoch=999
lrs=[]
for i in range(300):
    sche.step()
    lrs.append(sche.get_lr()[0])
plt.plot(lrs)
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import matplotlib.pyplot as plt\nsche=CosineAnnealingLR(torch.optim.Adam([torch.nn.Parameter(torch.tensor(1.0))]),warmup_epochs=10,max_epochs=100)\nsche.last_epoch=999\nlrs=[]\nfor i in range(300):\n    sche.step()\n    lrs.append(sche.get_lr()[0])\nplt.plot(lrs)', 'execution_count': 10}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '/home/rain/exp_env/.venv/lib/python3.11/site-packages/torch/optim/lr_scheduler.py:143: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate\n  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "\n'}
[NbConvertApp] msg_type: execute_result
[NbConvertApp] content: {'data': {'text/plain': '[<matplotlib.lines.Line2D at 0x7fb2f9b5ea90>]'}, 'metadata': {}, 'execution_count': 10}
[NbConvertApp] msg_type: display_data
[NbConvertApp] content: {'data': {'text/plain': '<Figure size 640x480 with 1 Axes>', 'image/png': ''}, 'metadata': {}, 'transient': {}}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
import torch
class CossineLRDecay(torch.optim.lr_scheduler._LRScheduler):
    def __init__(self,optimizer,lr_max,lr_min,max_steps,warmup_steps):
        self.lr_max=lr_max
        self.lr_min=lr_min
        self.max_steps=max_steps
        self.warmup_steps=warmup_steps
        super().__init__(optimizer)
    def get_lr(self):
        if self.last_epoch<self.warmup_steps:
            return [self.lr_max/self.warmup_steps*(self.last_epoch+1) for _ in self.optimizer.param_groups]
        elif self.last_epoch<self.max_steps:
            return [self.lr_min+(self.lr_max-self.lr_min)*(1+math.cos(math.pi*(self.last_epoch-self.warmup_steps)/(self.max_steps-self.warmup_steps)))/2 for _ in self.optimizer.param_groups]
        else:
            return [self.lr_min for _ in self.optimizer.param_groups]

sche=CossineLRDecay(torch.optim.Adam([torch.nn.Parameter(torch.tensor(1.0))]),lr_max=0.1,lr_min=0.0001,max_steps=1000,warmup_steps=0)
sche.last_epoch=999
lrs=[]
for i in range(1000):
    sche.step()
    lrs.append(sche.get_lr()[0])
plt.plot(lrs)
    
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import torch\nclass CossineLRDecay(torch.optim.lr_scheduler._LRScheduler):\n    def __init__(self,optimizer,lr_max,lr_min,max_steps,warmup_steps):\n        self.lr_max=lr_max\n        self.lr_min=lr_min\n        self.max_steps=max_steps\n        self.warmup_steps=warmup_steps\n        super().__init__(optimizer)\n    def get_lr(self):\n        if self.last_epoch<self.warmup_steps:\n            return [self.lr_max/self.warmup_steps*(self.last_epoch+1) for _ in self.optimizer.param_groups]\n        elif self.last_epoch<self.max_steps:\n            return [self.lr_min+(self.lr_max-self.lr_min)*(1+math.cos(math.pi*(self.last_epoch-self.warmup_steps)/(self.max_steps-self.warmup_steps)))/2 for _ in self.optimizer.param_groups]\n        else:\n            return [self.lr_min for _ in self.optimizer.param_groups]\n\nsche=CossineLRDecay(torch.optim.Adam([torch.nn.Parameter(torch.tensor(1.0))]),lr_max=0.1,lr_min=0.0001,max_steps=1000,warmup_steps=0)\nsche.last_epoch=999\nlrs=[]\nfor i in range(1000):\n    sche.step()\n    lrs.append(sche.get_lr()[0])\nplt.plot(lrs)\n    ', 'execution_count': 11}
[NbConvertApp] msg_type: execute_result
[NbConvertApp] content: {'data': {'text/plain': '[<matplotlib.lines.Line2D at 0x7fb3a9a9cf50>]'}, 'metadata': {}, 'execution_count': 11}
[NbConvertApp] msg_type: display_data
[NbConvertApp] content: {'data': {'text/plain': '<Figure size 640x480 with 1 Axes>', 'image/png': ''}, 'metadata': {}, 'transient': {}}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
import matplotlib.pyplot as plt
import math
max_lr = 6e-4
min_lr = max_lr * 0.1
warmup_steps = 0
max_steps = 840 # 19,073 steps is ~1 epoch, if data is 10B tokens and batch size 0.5M tokens
def get_lr(it):
    # 1) linear warmup for warmup_iters steps
    if it < warmup_steps:
        return max_lr * (it+1) / warmup_steps
    # 2) if it > lr_decay_iters, return min learning rate
    if it > max_steps:
        return min_lr
    # 3) in between, use cosine decay down to min learning rate
    decay_ratio = (it - warmup_steps) / (max_steps - warmup_steps)
    assert 0 <= decay_ratio <= 1
    coeff = 0.5 * (1.0 + math.cos(math.pi * decay_ratio)) # coeff starts at 1 and goes to 0
    return min_lr + coeff * (max_lr - min_lr)

plt.plot([get_lr(i) for i in range(840)])
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import matplotlib.pyplot as plt\nimport math\nmax_lr = 6e-4\nmin_lr = max_lr * 0.1\nwarmup_steps = 0\nmax_steps = 840 # 19,073 steps is ~1 epoch, if data is 10B tokens and batch size 0.5M tokens\ndef get_lr(it):\n    # 1) linear warmup for warmup_iters steps\n    if it < warmup_steps:\n        return max_lr * (it+1) / warmup_steps\n    # 2) if it > lr_decay_iters, return min learning rate\n    if it > max_steps:\n        return min_lr\n    # 3) in between, use cosine decay down to min learning rate\n    decay_ratio = (it - warmup_steps) / (max_steps - warmup_steps)\n    assert 0 <= decay_ratio <= 1\n    coeff = 0.5 * (1.0 + math.cos(math.pi * decay_ratio)) # coeff starts at 1 and goes to 0\n    return min_lr + coeff * (max_lr - min_lr)\n\nplt.plot([get_lr(i) for i in range(840)])', 'execution_count': 12}
[NbConvertApp] msg_type: execute_result
[NbConvertApp] content: {'data': {'text/plain': '[<matplotlib.lines.Line2D at 0x7fb2f8813d90>]'}, 'metadata': {}, 'execution_count': 12}
[NbConvertApp] msg_type: display_data
[NbConvertApp] content: {'data': {'text/plain': '<Figure size 640x480 with 1 Axes>', 'image/png': ''}, 'metadata': {}, 'transient': {}}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:


@dataclass
class TransformerTrainGenKeys(BaseTrainGenKeys):
    src_ids='src_ids'
    tgt_ids='tgt_ids'
    encoder_mask='encoder_mask'
    decoder_mask='decoder_mask'
    sampled_src='sampled_src'
    sampled_tgt='sampled_tgt'
    sampled_pred='sampled_pred'
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': "\n\n@dataclass\nclass TransformerTrainGenKeys(BaseTrainGenKeys):\n    src_ids='src_ids'\n    tgt_ids='tgt_ids'\n    encoder_mask='encoder_mask'\n    decoder_mask='decoder_mask'\n    sampled_src='sampled_src'\n    sampled_tgt='sampled_tgt'\n    sampled_pred='sampled_pred'", 'execution_count': 13}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
import sys
import wandb

class TrainLogger:
    def __init__(self,cfg):
        self.test_scores=[]
        wandb.init(project='transformer-jesc',config=cfg)
    
    def write(self,g):
        wandb.log({BaseTrainGenKeys.epoch:g[BaseTrainGenKeys.epoch],BaseTrainGenKeys.train_loss:g[BaseTrainGenKeys.train_loss],BaseTrainGenKeys.test_loss:g[BaseTrainGenKeys.test_loss],TransformerTrainGenKeys.sampled_src:g[TransformerTrainGenKeys.sampled_src],TransformerTrainGenKeys.sampled_tgt:g[TransformerTrainGenKeys.sampled_tgt],TransformerTrainGenKeys.sampled_pred:g[TransformerTrainGenKeys.sampled_pred]})


    def log(self, epoch, batch_step, max_batch_step, train_loss, test_loss: float|None):
        if batch_step!=0:
            print("\033[F\033[K",end="")
            print("\033[F\033[K",end="")
        if max_batch_step==0:
            max_batch_step=1
        progress=['=' for _ in range(int(batch_step/max_batch_step*50))]
        progress.append('>')
        progress.extend([' ' for _ in range(50-len(progress))])
        train_loss = f'{train_loss:.4f}'
        if test_loss is None:
            print(f'epoch:{epoch} batch_step:{batch_step}/{max_batch_step} [{"".join(progress)}] train_loss:{train_loss}')
        else:
            self.test_scores.append(test_loss)
            test_loss = f'{test_loss:.4f}'
            print(f'epoch:{epoch} batch_step:{batch_step}/{max_batch_step} [{"".join(progress)}] train_loss:{train_loss} test_loss:{test_loss}')

[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'import sys\nimport wandb\n\nclass TrainLogger:\n    def __init__(self,cfg):\n        self.test_scores=[]\n        wandb.init(project=\'transformer-jesc\',config=cfg)\n    \n    def write(self,g):\n        wandb.log({BaseTrainGenKeys.epoch:g[BaseTrainGenKeys.epoch],BaseTrainGenKeys.train_loss:g[BaseTrainGenKeys.train_loss],BaseTrainGenKeys.test_loss:g[BaseTrainGenKeys.test_loss],TransformerTrainGenKeys.sampled_src:g[TransformerTrainGenKeys.sampled_src],TransformerTrainGenKeys.sampled_tgt:g[TransformerTrainGenKeys.sampled_tgt],TransformerTrainGenKeys.sampled_pred:g[TransformerTrainGenKeys.sampled_pred]})\n\n\n    def log(self, epoch, batch_step, max_batch_step, train_loss, test_loss: float|None):\n        if batch_step!=0:\n            print("\\033[F\\033[K",end="")\n            print("\\033[F\\033[K",end="")\n        if max_batch_step==0:\n            max_batch_step=1\n        progress=[\'=\' for _ in range(int(batch_step/max_batch_step*50))]\n        progress.append(\'>\')\n        progress.extend([\' \' for _ in range(50-len(progress))])\n        train_loss = f\'{train_loss:.4f}\'\n        if test_loss is None:\n            print(f\'epoch:{epoch} batch_step:{batch_step}/{max_batch_step} [{"".join(progress)}] train_loss:{train_loss}\')\n        else:\n            self.test_scores.append(test_loss)\n            test_loss = f\'{test_loss:.4f}\'\n            print(f\'epoch:{epoch} batch_step:{batch_step}/{max_batch_step} [{"".join(progress)}] train_loss:{train_loss} test_loss:{test_loss}\')\n', 'execution_count': 14}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:

from adabelief_pytorch import AdaBelief
class SchedulerType:
    CosineAnnealingLR="CosineAnnealingLR"
    CosineAnnealingWarmRestarts="CosineAnnealingWarmRestarts"
    CosineAnnealingWarmUp="CosineAnnealingWarmUp"
    CossineLRDecay="CossineLRDecay"
    StepLR="StepLR"
    NoneType="NoneType"
@dataclass
class CFG(BaseTrainPipelineConfig):
    batch_size:int=128
    skip=13920
    max_epochs:int|None=1
    is_running:bool=True
    debug:bool=False
    max_len: int = maker.src_tokenizer.max_length
    lr: float =0.0007 #0.0010466176# 2.79936e-05 #2.79936e-05*6#
    min_lr: float = 2.79936e-05
    accum_iter: int = 512//128//2
    device: str = 'cuda' if torch.cuda.is_available() else 'cpu'
    embedding_dim: int = 512
    hidden_dim: int = 512
    num_heads: int = 12
    num_blocks: int = 3
    encode_vocab_size: int = maker.src_tokenizer.tokenizer.get_vocab().keys().__len__()
    decode_vocab_size: int = maker.tgt_tokenizer.tokenizer.get_vocab().keys().__len__()
    pad_idx:int=maker.src_tokenizer.tokenizer.pad_token_id # type: ignore
    tokenizer=maker
    optimizer=torch.optim.AdamW#AdaBelief#torch.optim.RAdam#
    default_dtype=torch.bfloat16
    eval_steps:int=60
    scheduler=SchedulerType.CossineLRDecay
    warmup_percent=0.0015

def cfg_to_dict(cfg):
    return {k:v for k,v in cfg.__dict__.items() if not k.startswith('_')}
logger=TrainLogger(cfg_to_dict(CFG()))
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': '\nfrom adabelief_pytorch import AdaBelief\nclass SchedulerType:\n    CosineAnnealingLR="CosineAnnealingLR"\n    CosineAnnealingWarmRestarts="CosineAnnealingWarmRestarts"\n    CosineAnnealingWarmUp="CosineAnnealingWarmUp"\n    CossineLRDecay="CossineLRDecay"\n    StepLR="StepLR"\n    NoneType="NoneType"\n@dataclass\nclass CFG(BaseTrainPipelineConfig):\n    batch_size:int=128\n    skip=13920\n    max_epochs:int|None=1\n    is_running:bool=True\n    debug:bool=False\n    max_len: int = maker.src_tokenizer.max_length\n    lr: float =0.0007 #0.0010466176# 2.79936e-05 #2.79936e-05*6#\n    min_lr: float = 2.79936e-05\n    accum_iter: int = 512//128//2\n    device: str = \'cuda\' if torch.cuda.is_available() else \'cpu\'\n    embedding_dim: int = 512\n    hidden_dim: int = 512\n    num_heads: int = 12\n    num_blocks: int = 3\n    encode_vocab_size: int = maker.src_tokenizer.tokenizer.get_vocab().keys().__len__()\n    decode_vocab_size: int = maker.tgt_tokenizer.tokenizer.get_vocab().keys().__len__()\n    pad_idx:int=maker.src_tokenizer.tokenizer.pad_token_id # type: ignore\n    tokenizer=maker\n    optimizer=torch.optim.AdamW#AdaBelief#torch.optim.RAdam#\n    default_dtype=torch.bfloat16\n    eval_steps:int=60\n    scheduler=SchedulerType.CossineLRDecay\n    warmup_percent=0.0015\n\ndef cfg_to_dict(cfg):\n    return {k:v for k,v in cfg.__dict__.items() if not k.startswith(\'_\')}\nlogger=TrainLogger(cfg_to_dict(CFG()))', 'execution_count': 15}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: Currently logged in as: \x1b[33myama-yeah\x1b[0m (\x1b[33mgrad-exp\x1b[0m). Use \x1b[1m`wandb login --relogin`\x1b[0m to force relogin\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: wandb version 0.17.4 is available!  To upgrade, please run:\n\x1b[34m\x1b[1mwandb\x1b[0m:  $ pip install wandb --upgrade\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: Tracking run with wandb version 0.17.3\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: Run data is saved locally in \x1b[35m\x1b[1m/home/rain/exp_env/src/work/translate/wandb/run-20240704_134805-n2rfl94h\x1b[0m\n\x1b[34m\x1b[1mwandb\x1b[0m: Run \x1b[1m`wandb offline`\x1b[0m to turn off syncing.\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: Syncing run \x1b[33mautumn-firefly-115\x1b[0m\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: ‚≠êÔ∏è View project at \x1b[34m\x1b[4mhttps://wandb.ai/grad-exp/transformer-jesc\x1b[0m\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '\x1b[34m\x1b[1mwandb\x1b[0m: üöÄ View run at \x1b[34m\x1b[4mhttps://wandb.ai/grad-exp/transformer-jesc/runs/n2rfl94h\x1b[0m\n'}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:


class TransformerTrainPipeline(BaseTrainPipeline):
    def __init__(self,train_src,train_tgt,test_src,test_tgt,config:CFG=CFG()):
        super().__init__(config)
        self.encoder=transformer.Encoder(
            how_many_block=config.num_blocks,
            how_many_heads=config.num_heads,
            vocab_size=config.encode_vocab_size,
            embedding_dim=config.embedding_dim,
            hidden_dim=config.hidden_dim,
            pad_idx= config.pad_idx,
            max_seq_len=config.max_len,
            layer_norm_eps=1e-6,
        ).to(config.device)
        self.decoder=transformer.Decoder(
            how_many_block=config.num_blocks,
            how_many_heads=config.num_heads,
            vocab_size=config.decode_vocab_size,
            embedding_dim=config.embedding_dim,
            hidden_dim=config.hidden_dim,
            pad_idx= config.pad_idx,
            max_seq_len=config.max_len,
            layer_norm_eps=1e-6,
        ).to(config.device)
        self.optimizer=config.optimizer(list(self.encoder.parameters())[1:]+list(self.decoder.parameters())[1:],lr=config.lr,betas=(0.9,0.95),eps=1e-8,fused=True)#,eps=1e-16, betas=(0.9,0.999), weight_decouple = True, rectify = True)
        self.optimizer2=torch.optim.RAdam(list(self.encoder.parameters())[0:1]+list(self.decoder.parameters())[0:1],lr=config.min_lr,betas=(0.9,0.95),eps=1e-8)
        if config.scheduler==SchedulerType.CosineAnnealingLR:
            self.scheduler=torch.optim.lr_scheduler.CosineAnnealingLR(self.optimizer,int(2000/config.batch_size*20*5/config.accum_iter),config.min_lr)
        elif config.scheduler==SchedulerType.CosineAnnealingWarmUp:
            self.scheduler=CosineAnnealingLR(self.optimizer,int(2000/config.batch_size*10*5/config.accum_iter),int(2000/config.batch_size*20*5/config.accum_iter),config.min_lr,config.min_lr)
        elif config.scheduler==SchedulerType.CossineLRDecay:
            self.scheduler=CossineLRDecay(self.optimizer,lr_max=config.lr,lr_min=config.min_lr,max_steps=len(train_src)//config.batch_size*config.max_epochs//config.accum_iter,warmup_steps=int(len(train_src)//config.batch_size*config.max_epochs//config.accum_iter*config.warmup_percent))
        elif config.scheduler==SchedulerType.StepLR:
            self.scheduler=torch.optim.lr_scheduler.StepLR(self.optimizer,step_size=1,gamma=6)
        if config.scheduler!=SchedulerType.NoneType:
            self.scheduler.last_step=self.config.skip-1
        #self.scheduler=CossineLRDecay(self.optimizer,lr_max=config.lr,lr_min=2.79936e-05,max_steps=840//2,warmup_steps=0)
        #self.scheduler=torch.optim.lr_scheduler.StepLR(self.optimizer,step_size=1,gamma=6)
        ## type: ignore
        self.config:CFG
            
    def id_mask_split(self,G):
        for g in G:
            g[TransformerTrainGenKeys.src_ids]=g[BaseTrainGenKeys.batch_x][0].squeeze(1)
            #print(maker.src_tokenizer.tokenizer.decode(g[BaseTrainGenKeys.batch_x][0].squeeze(1)[0].tolist()))
            g[TransformerTrainGenKeys.encoder_mask]=g[BaseTrainGenKeys.batch_x][1].squeeze(1)
            g[TransformerTrainGenKeys.tgt_ids]=g[BaseTrainGenKeys.batch_y][0].squeeze(1)
            #print(maker.tgt_tokenizer.tokenizer.decode(g[BaseTrainGenKeys.batch_y][0].squeeze(1)[0].tolist()))
            g[TransformerTrainGenKeys.decoder_mask]=g[BaseTrainGenKeys.batch_y][1].squeeze(1)
            yield g
    
    def forward(self,G):
        self.encoder.train()
        self.decoder.train()
        for g in G:
            with torch.set_grad_enabled(True):
                loss=None
                self.optimizer.zero_grad()
                y=self.encoder(g[TransformerTrainGenKeys.src_ids].to(self.config.device),g[TransformerTrainGenKeys.encoder_mask].to(self.config.device))
                y=self.decoder(g[TransformerTrainGenKeys.tgt_ids].to(self.config.device),y,g[TransformerTrainGenKeys.decoder_mask].to(self.config.device))
                tgt_ids=g[TransformerTrainGenKeys.tgt_ids][:,1:].to(self.config.device)
                # one hot encode
                y=y[:,:-1]
                tgt_ids=tgt_ids.contiguous().view(-1)
                y=y.contiguous().view(-1,self.config.decode_vocab_size)
                loss = torch.nn.CrossEntropyLoss(
                    ignore_index=self.config.pad_idx
                )(y, tgt_ids)/self.config.accum_iter
                del tgt_ids,y
                gc.collect()
                torch.cuda.empty_cache()
                loss.backward()
                if g[BaseTrainGenKeys.batch_step] % self.config.accum_iter == 0 or g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:
                    # print(loss.item())
                    torch.nn.utils.clip_grad_norm_(list(self.encoder.parameters())+list(self.decoder.parameters()), 1.0)
                    self.optimizer.step()
                    self.optimizer2.step()
                    if self.scheduler is not None and self.config.scheduler!=SchedulerType.StepLR:
                        self.scheduler.step()
                
                g[BaseTrainGenKeys.train_loss]=loss.item()*self.config.accum_iter
                
            yield g
    def test(self,G):
        for g in G:
            
            with torch.no_grad():
                self.encoder.eval()
                self.decoder.eval()
                src_ids=g[TransformerTrainGenKeys.src_ids].to(self.config.device)
                encoder_mask=g[TransformerTrainGenKeys.encoder_mask].to(self.config.device)
                tgt_ids=g[TransformerTrainGenKeys.tgt_ids].to(self.config.device)
                decoder_mask=g[TransformerTrainGenKeys.decoder_mask].to(self.config.device)
                y=self.encoder(src_ids,encoder_mask)
                y=self.decoder(tgt_ids,y,decoder_mask)
                tgt_ids=tgt_ids[:,1:]
                y=y[:,:-1]
                if g[BaseTrainGenKeys.batch_step]==g[BaseTrainGenKeys.max_batch_step]:
                    how_many=3
                    src_text=maker.src_tokenizer.tokenizer.batch_decode(src_ids[:how_many].tolist())
                    src_text=[text.replace('[PAD]','') for text in src_text]
                    tgt_text=maker.tgt_tokenizer.tokenizer.batch_decode(tgt_ids[:how_many].tolist())
                    tgt_text=[text.replace('[PAD]','') for text in tgt_text]
                    pred_text=maker.tgt_tokenizer.tokenizer.batch_decode(torch.argmax(y,dim=-1)[:how_many].tolist())
                    pred_text=[text.replace('[PAD]','') for text in pred_text]
                    #EOS„Åæ„Åß„ÅÆ„ÅøË°®Á§∫
                    pred_text=[text[:text.find('[EOS]')+5] for text in pred_text]
                    print(src_text)
                    print(tgt_text)
                    print(pred_text)
                    g[TransformerTrainGenKeys.sampled_src]=src_text[0]
                    g[TransformerTrainGenKeys.sampled_tgt]=tgt_text[0]
                    g[TransformerTrainGenKeys.sampled_pred]=pred_text[0]
                tgt_ids=tgt_ids.contiguous().view(-1)
                y=y.contiguous().view(-1,self.config.decode_vocab_size)
                loss = torch.nn.CrossEntropyLoss(ignore_index=self.config.pad_idx)(y, tgt_ids).cpu()
                g[BaseTrainGenKeys.test_loss]=loss.detach().item()
            yield g
    def run_after_epoch(self,G):
        for g in G:
            logger.log(g[BaseTrainGenKeys.epoch],g[BaseTrainGenKeys.batch_step],g[BaseTrainGenKeys.max_batch_step],g[BaseTrainGenKeys.train_loss],g.get(BaseTrainGenKeys.test_loss,None))
            if g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:
                if self.config.scheduler==SchedulerType.StepLR:
                    self.scheduler.step()
                    print(self.optimizer.param_groups[0]['lr'])
                yield g
    def run_eval_each_step(self,G):
        train_loss=0
        cnt=0
        for g in G:
            train_loss+=g[BaseTrainGenKeys.train_loss]
            cnt+=1
            logger.log(g[BaseTrainGenKeys.epoch],g[BaseTrainGenKeys.batch_step],g[BaseTrainGenKeys.max_batch_step],g[BaseTrainGenKeys.train_loss],g.get(BaseTrainGenKeys.test_loss,None))
            if g[BaseTrainGenKeys.batch_step]% (self.config.accum_iter*self.config.eval_steps)==0 or g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:
                g[BaseTrainGenKeys.train_loss]=train_loss/cnt
                train_loss=0
                cnt=0
                yield g
    def run_after_test(self,G):
        loss=0
        for g in G:
            if g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:
                g[BaseTrainGenKeys.test_loss]+=loss
                g[BaseTrainGenKeys.test_loss]/=g[BaseTrainGenKeys.max_batch_step]
                loss=0
                yield g
            else:
                loss+=g[BaseTrainGenKeys.test_loss]
    def reduce_mem_gen(self,G):
        for g in G:
            torch.cuda.empty_cache()
            gc.collect()
            yield g
config=CFG()
#test
pipeline=TransformerTrainPipeline(train_x,train_y,test_x,test_y,config)
# pipeline.encoder.embedding.load_state_dict(torch.load('/home/rain/exp_env/src/work/translate/model/fasttext_jp.pth'))
# pipeline.decoder.embedding.load_state_dict(torch.load('/home/rain/exp_env/src/work/translate/model/fasttext_en.pth'))
pipeline.encoder.load_state_dict(torch.load('encoder.pth'))
pipeline.decoder.load_state_dict(torch.load('decoder.pth'))
# compile
pipeline.encoder=torch.compile(pipeline.encoder,mode="reduce-overhead")
pipeline.decoder=torch.compile(pipeline.decoder,mode="reduce-overhead")
# pipeline.encoder.embedding.requires_grad=False
# pipeline.decoder.embedding.requires_grad=False

[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': '\n\nclass TransformerTrainPipeline(BaseTrainPipeline):\n    def __init__(self,train_src,train_tgt,test_src,test_tgt,config:CFG=CFG()):\n        super().__init__(config)\n        self.encoder=transformer.Encoder(\n            how_many_block=config.num_blocks,\n            how_many_heads=config.num_heads,\n            vocab_size=config.encode_vocab_size,\n            embedding_dim=config.embedding_dim,\n            hidden_dim=config.hidden_dim,\n            pad_idx= config.pad_idx,\n            max_seq_len=config.max_len,\n            layer_norm_eps=1e-6,\n        ).to(config.device)\n        self.decoder=transformer.Decoder(\n            how_many_block=config.num_blocks,\n            how_many_heads=config.num_heads,\n            vocab_size=config.decode_vocab_size,\n            embedding_dim=config.embedding_dim,\n            hidden_dim=config.hidden_dim,\n            pad_idx= config.pad_idx,\n            max_seq_len=config.max_len,\n            layer_norm_eps=1e-6,\n        ).to(config.device)\n        self.optimizer=config.optimizer(list(self.encoder.parameters())[1:]+list(self.decoder.parameters())[1:],lr=config.lr,betas=(0.9,0.95),eps=1e-8,fused=True)#,eps=1e-16, betas=(0.9,0.999), weight_decouple = True, rectify = True)\n        self.optimizer2=torch.optim.RAdam(list(self.encoder.parameters())[0:1]+list(self.decoder.parameters())[0:1],lr=config.min_lr,betas=(0.9,0.95),eps=1e-8)\n        if config.scheduler==SchedulerType.CosineAnnealingLR:\n            self.scheduler=torch.optim.lr_scheduler.CosineAnnealingLR(self.optimizer,int(2000/config.batch_size*20*5/config.accum_iter),config.min_lr)\n        elif config.scheduler==SchedulerType.CosineAnnealingWarmUp:\n            self.scheduler=CosineAnnealingLR(self.optimizer,int(2000/config.batch_size*10*5/config.accum_iter),int(2000/config.batch_size*20*5/config.accum_iter),config.min_lr,config.min_lr)\n        elif config.scheduler==SchedulerType.CossineLRDecay:\n            self.scheduler=CossineLRDecay(self.optimizer,lr_max=config.lr,lr_min=config.min_lr,max_steps=len(train_src)//config.batch_size*config.max_epochs//config.accum_iter,warmup_steps=int(len(train_src)//config.batch_size*config.max_epochs//config.accum_iter*config.warmup_percent))\n        elif config.scheduler==SchedulerType.StepLR:\n            self.scheduler=torch.optim.lr_scheduler.StepLR(self.optimizer,step_size=1,gamma=6)\n        if config.scheduler!=SchedulerType.NoneType:\n            self.scheduler.last_step=self.config.skip-1\n        #self.scheduler=CossineLRDecay(self.optimizer,lr_max=config.lr,lr_min=2.79936e-05,max_steps=840//2,warmup_steps=0)\n        #self.scheduler=torch.optim.lr_scheduler.StepLR(self.optimizer,step_size=1,gamma=6)\n        ## type: ignore\n        self.config:CFG\n            \n    def id_mask_split(self,G):\n        for g in G:\n            g[TransformerTrainGenKeys.src_ids]=g[BaseTrainGenKeys.batch_x][0].squeeze(1)\n            #print(maker.src_tokenizer.tokenizer.decode(g[BaseTrainGenKeys.batch_x][0].squeeze(1)[0].tolist()))\n            g[TransformerTrainGenKeys.encoder_mask]=g[BaseTrainGenKeys.batch_x][1].squeeze(1)\n            g[TransformerTrainGenKeys.tgt_ids]=g[BaseTrainGenKeys.batch_y][0].squeeze(1)\n            #print(maker.tgt_tokenizer.tokenizer.decode(g[BaseTrainGenKeys.batch_y][0].squeeze(1)[0].tolist()))\n            g[TransformerTrainGenKeys.decoder_mask]=g[BaseTrainGenKeys.batch_y][1].squeeze(1)\n            yield g\n    \n    def forward(self,G):\n        self.encoder.train()\n        self.decoder.train()\n        for g in G:\n            with torch.set_grad_enabled(True):\n                loss=None\n                self.optimizer.zero_grad()\n                y=self.encoder(g[TransformerTrainGenKeys.src_ids].to(self.config.device),g[TransformerTrainGenKeys.encoder_mask].to(self.config.device))\n                y=self.decoder(g[TransformerTrainGenKeys.tgt_ids].to(self.config.device),y,g[TransformerTrainGenKeys.decoder_mask].to(self.config.device))\n                tgt_ids=g[TransformerTrainGenKeys.tgt_ids][:,1:].to(self.config.device)\n                # one hot encode\n                y=y[:,:-1]\n                tgt_ids=tgt_ids.contiguous().view(-1)\n                y=y.contiguous().view(-1,self.config.decode_vocab_size)\n                loss = torch.nn.CrossEntropyLoss(\n                    ignore_index=self.config.pad_idx\n                )(y, tgt_ids)/self.config.accum_iter\n                del tgt_ids,y\n                gc.collect()\n                torch.cuda.empty_cache()\n                loss.backward()\n                if g[BaseTrainGenKeys.batch_step] % self.config.accum_iter == 0 or g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:\n                    # print(loss.item())\n                    torch.nn.utils.clip_grad_norm_(list(self.encoder.parameters())+list(self.decoder.parameters()), 1.0)\n                    self.optimizer.step()\n                    self.optimizer2.step()\n                    if self.scheduler is not None and self.config.scheduler!=SchedulerType.StepLR:\n                        self.scheduler.step()\n                \n                g[BaseTrainGenKeys.train_loss]=loss.item()*self.config.accum_iter\n                \n            yield g\n    def test(self,G):\n        for g in G:\n            \n            with torch.no_grad():\n                self.encoder.eval()\n                self.decoder.eval()\n                src_ids=g[TransformerTrainGenKeys.src_ids].to(self.config.device)\n                encoder_mask=g[TransformerTrainGenKeys.encoder_mask].to(self.config.device)\n                tgt_ids=g[TransformerTrainGenKeys.tgt_ids].to(self.config.device)\n                decoder_mask=g[TransformerTrainGenKeys.decoder_mask].to(self.config.device)\n                y=self.encoder(src_ids,encoder_mask)\n                y=self.decoder(tgt_ids,y,decoder_mask)\n                tgt_ids=tgt_ids[:,1:]\n                y=y[:,:-1]\n                if g[BaseTrainGenKeys.batch_step]==g[BaseTrainGenKeys.max_batch_step]:\n                    how_many=3\n                    src_text=maker.src_tokenizer.tokenizer.batch_decode(src_ids[:how_many].tolist())\n                    src_text=[text.replace(\'[PAD]\',\'\') for text in src_text]\n                    tgt_text=maker.tgt_tokenizer.tokenizer.batch_decode(tgt_ids[:how_many].tolist())\n                    tgt_text=[text.replace(\'[PAD]\',\'\') for text in tgt_text]\n                    pred_text=maker.tgt_tokenizer.tokenizer.batch_decode(torch.argmax(y,dim=-1)[:how_many].tolist())\n                    pred_text=[text.replace(\'[PAD]\',\'\') for text in pred_text]\n                    #EOS„Åæ„Åß„ÅÆ„ÅøË°®Á§∫\n                    pred_text=[text[:text.find(\'[EOS]\')+5] for text in pred_text]\n                    print(src_text)\n                    print(tgt_text)\n                    print(pred_text)\n                    g[TransformerTrainGenKeys.sampled_src]=src_text[0]\n                    g[TransformerTrainGenKeys.sampled_tgt]=tgt_text[0]\n                    g[TransformerTrainGenKeys.sampled_pred]=pred_text[0]\n                tgt_ids=tgt_ids.contiguous().view(-1)\n                y=y.contiguous().view(-1,self.config.decode_vocab_size)\n                loss = torch.nn.CrossEntropyLoss(ignore_index=self.config.pad_idx)(y, tgt_ids).cpu()\n                g[BaseTrainGenKeys.test_loss]=loss.detach().item()\n            yield g\n    def run_after_epoch(self,G):\n        for g in G:\n            logger.log(g[BaseTrainGenKeys.epoch],g[BaseTrainGenKeys.batch_step],g[BaseTrainGenKeys.max_batch_step],g[BaseTrainGenKeys.train_loss],g.get(BaseTrainGenKeys.test_loss,None))\n            if g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:\n                if self.config.scheduler==SchedulerType.StepLR:\n                    self.scheduler.step()\n                    print(self.optimizer.param_groups[0][\'lr\'])\n                yield g\n    def run_eval_each_step(self,G):\n        train_loss=0\n        cnt=0\n        for g in G:\n            train_loss+=g[BaseTrainGenKeys.train_loss]\n            cnt+=1\n            logger.log(g[BaseTrainGenKeys.epoch],g[BaseTrainGenKeys.batch_step],g[BaseTrainGenKeys.max_batch_step],g[BaseTrainGenKeys.train_loss],g.get(BaseTrainGenKeys.test_loss,None))\n            if g[BaseTrainGenKeys.batch_step]% (self.config.accum_iter*self.config.eval_steps)==0 or g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:\n                g[BaseTrainGenKeys.train_loss]=train_loss/cnt\n                train_loss=0\n                cnt=0\n                yield g\n    def run_after_test(self,G):\n        loss=0\n        for g in G:\n            if g[BaseTrainGenKeys.batch_step] == g[BaseTrainGenKeys.max_batch_step]:\n                g[BaseTrainGenKeys.test_loss]+=loss\n                g[BaseTrainGenKeys.test_loss]/=g[BaseTrainGenKeys.max_batch_step]\n                loss=0\n                yield g\n            else:\n                loss+=g[BaseTrainGenKeys.test_loss]\n    def reduce_mem_gen(self,G):\n        for g in G:\n            torch.cuda.empty_cache()\n            gc.collect()\n            yield g\nconfig=CFG()\n#test\npipeline=TransformerTrainPipeline(train_x,train_y,test_x,test_y,config)\n# pipeline.encoder.embedding.load_state_dict(torch.load(\'/home/rain/exp_env/src/work/translate/model/fasttext_jp.pth\'))\n# pipeline.decoder.embedding.load_state_dict(torch.load(\'/home/rain/exp_env/src/work/translate/model/fasttext_en.pth\'))\npipeline.encoder.load_state_dict(torch.load(\'encoder.pth\'))\npipeline.decoder.load_state_dict(torch.load(\'decoder.pth\'))\n# compile\npipeline.encoder=torch.compile(pipeline.encoder,mode="reduce-overhead")\npipeline.decoder=torch.compile(pipeline.decoder,mode="reduce-overhead")\n# pipeline.encoder.embedding.requires_grad=False\n# pipeline.decoder.embedding.requires_grad=False\n', 'execution_count': 16}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
cfg_to_dict(pipeline.config)
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': 'cfg_to_dict(pipeline.config)', 'execution_count': 17}
[NbConvertApp] msg_type: execute_result
[NbConvertApp] content: {'data': {'text/plain': "{'batch_size': 128,\n 'max_epochs': 1,\n 'is_running': True,\n 'debug': False,\n 'max_len': 256,\n 'lr': 0.0007,\n 'min_lr': 2.79936e-05,\n 'accum_iter': 2,\n 'device': 'cuda',\n 'embedding_dim': 512,\n 'hidden_dim': 512,\n 'num_heads': 12,\n 'num_blocks': 3,\n 'encode_vocab_size': 30004,\n 'decode_vocab_size': 30004,\n 'pad_idx': 30003,\n 'eval_steps': 60}"}, 'metadata': {}, 'execution_count': 17}
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'idle'}
[NbConvertApp] Executing cell:
g=pipeline.train_loop_gen(train_dataset)
g=pipeline.id_mask_split(g)
g=pipeline.forward(g)
g=pipeline.reduce_mem_gen(g)
g=pipeline.run_eval_each_step(g)
# g=[{}]
g=pipeline.batch_gen(g,test_dataset,scale=1,no_skip=True)
g=pipeline.id_mask_split(g)
g=pipeline.test(g)
g=pipeline.reduce_mem_gen(g)
g=pipeline.run_after_test(g)
best=100
for i in g:
    if i[TransformerTrainGenKeys.test_loss]<best:
        best=i[TransformerTrainGenKeys.test_loss]
        torch.save(pipeline.encoder.state_dict(), 'encoder1.pth')
        torch.save(pipeline.decoder.state_dict(), 'decoder1.pth')
    logger.log(i[BaseTrainGenKeys.epoch],i[BaseTrainGenKeys.batch_step],i[BaseTrainGenKeys.max_batch_step],i[BaseTrainGenKeys.train_loss],i.get(BaseTrainGenKeys.test_loss,None))
    logger.write(i)
    pipeline.encoder.train()
    pipeline.decoder.train()
[NbConvertApp] msg_type: status
[NbConvertApp] content: {'execution_state': 'busy'}
[NbConvertApp] msg_type: execute_input
[NbConvertApp] content: {'code': "g=pipeline.train_loop_gen(train_dataset)\ng=pipeline.id_mask_split(g)\ng=pipeline.forward(g)\ng=pipeline.reduce_mem_gen(g)\ng=pipeline.run_eval_each_step(g)\n# g=[{}]\ng=pipeline.batch_gen(g,test_dataset,scale=1,no_skip=True)\ng=pipeline.id_mask_split(g)\ng=pipeline.test(g)\ng=pipeline.reduce_mem_gen(g)\ng=pipeline.run_after_test(g)\nbest=100\nfor i in g:\n    if i[TransformerTrainGenKeys.test_loss]<best:\n        best=i[TransformerTrainGenKeys.test_loss]\n        torch.save(pipeline.encoder.state_dict(), 'encoder1.pth')\n        torch.save(pipeline.decoder.state_dict(), 'decoder1.pth')\n    logger.log(i[BaseTrainGenKeys.epoch],i[BaseTrainGenKeys.batch_step],i[BaseTrainGenKeys.max_batch_step],i[BaseTrainGenKeys.train_loss],i.get(BaseTrainGenKeys.test_loss,None))\n    logger.write(i)\n    pipeline.encoder.train()\n    pipeline.decoder.train()", 'execution_count': 18}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': '/home/rain/exp_env/.venv/lib/python3.11/site-packages/torch/_inductor/lowering.py:1611: UserWarning: Torchinductor does not support code generation for complex operators. Performance may be worse than eager.\n  warnings.warn(\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': "skipping cudagraphs due to ['non-cuda device in graph']\n"}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': "skipping cudagraphs due to ['non-cuda device in graph']\n"}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13921/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13922/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13923/79140 [========>                                         ] train_loss:4.0938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13924/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13925/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13926/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13927/79140 [========>                                         ] train_loss:4.1875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13928/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13929/79140 [========>                                         ] train_loss:3.9062\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13930/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13931/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13932/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13933/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13934/79140 [========>                                         ] train_loss:3.9844\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13935/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13936/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13937/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13938/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13939/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13940/79140 [========>                                         ] train_loss:3.5938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13941/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13942/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13943/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13944/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13945/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13946/79140 [========>                                         ] train_loss:4.0938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13947/79140 [========>                                         ] train_loss:3.7031\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13948/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13949/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13950/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13951/79140 [========>                                         ] train_loss:3.5625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13952/79140 [========>                                         ] train_loss:3.6562\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13953/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13954/79140 [========>                                         ] train_loss:3.6094\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13955/79140 [========>                                         ] train_loss:3.9531\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13956/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13957/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13958/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13959/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13960/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13961/79140 [========>                                         ] train_loss:3.9531\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13962/79140 [========>                                         ] train_loss:3.9062\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13963/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13964/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13965/79140 [========>                                         ] train_loss:3.6250\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13966/79140 [========>                                         ] train_loss:3.6406\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13967/79140 [========>                                         ] train_loss:3.5781\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13968/79140 [========>                                         ] train_loss:3.9844\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13969/79140 [========>                                         ] train_loss:3.7031\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13970/79140 [========>                                         ] train_loss:3.6719\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13971/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13972/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13973/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13974/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13975/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13976/79140 [========>                                         ] train_loss:3.9844\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13977/79140 [========>                                         ] train_loss:3.9219\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13978/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13979/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13980/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13981/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13982/79140 [========>                                         ] train_loss:3.9219\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13983/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13984/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13985/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13986/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13987/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13988/79140 [========>                                         ] train_loss:3.6875\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13989/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13990/79140 [========>                                         ] train_loss:4.0000\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13991/79140 [========>                                         ] train_loss:3.5938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13992/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13993/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13994/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13995/79140 [========>                                         ] train_loss:3.5938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13996/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13997/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13998/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:13999/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14000/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14001/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14002/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14003/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14004/79140 [========>                                         ] train_loss:3.7031\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14005/79140 [========>                                         ] train_loss:3.7344\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14006/79140 [========>                                         ] train_loss:3.5781\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14007/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14008/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14009/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14010/79140 [========>                                         ] train_loss:3.7656\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14011/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14012/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14013/79140 [========>                                         ] train_loss:3.9375\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14014/79140 [========>                                         ] train_loss:3.9062\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14015/79140 [========>                                         ] train_loss:3.8125\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14016/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14017/79140 [========>                                         ] train_loss:3.5938\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14018/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14019/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14020/79140 [========>                                         ] train_loss:4.0625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14021/79140 [========>                                         ] train_loss:4.0625\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14022/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14023/79140 [========>                                         ] train_loss:3.8750\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14024/79140 [========>                                         ] train_loss:3.9688\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14025/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14026/79140 [========>                                         ] train_loss:3.5312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14027/79140 [========>                                         ] train_loss:3.8281\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14028/79140 [========>                                         ] train_loss:3.8906\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14029/79140 [========>                                         ] train_loss:3.8438\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14030/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14031/79140 [========>                                         ] train_loss:3.7500\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14032/79140 [========>                                         ] train_loss:3.8594\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14033/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14034/79140 [========>                                         ] train_loss:3.6719\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14035/79140 [========>                                         ] train_loss:3.9219\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14036/79140 [========>                                         ] train_loss:3.7812\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14037/79140 [========>                                         ] train_loss:4.0312\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14038/79140 [========>                                         ] train_loss:3.7188\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14039/79140 [========>                                         ] train_loss:3.7969\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stdout', 'text': '\x1b[F\x1b[K\x1b[F\x1b[Kepoch:0 batch_step:14040/79140 [========>                                         ] train_loss:3.6562\n'}
[NbConvertApp] msg_type: stream
[NbConvertApp] content: {'name': 'stderr', 'text': "skipping cudagraphs due to ['non-cuda device in graph']\n"}
[NbConvertApp] ERROR | Kernel died while waiting for execute reply.
[NbConvertApp] Destroying zmq context for <jupyter_client.asynchronous.client.AsyncKernelClient object at 0x7fc3f554cfd0>
Traceback (most recent call last):
  File "/home/rain/exp_env/.venv/bin/jupyter-nbconvert", line 8, in <module>
    sys.exit(main())
             ^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/jupyter_core/application.py", line 283, in launch_instance
    super().launch_instance(argv=argv, **kwargs)
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/traitlets/config/application.py", line 1075, in launch_instance
    app.start()
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 420, in start
    self.convert_notebooks()
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 597, in convert_notebooks
    self.convert_single_notebook(notebook_filename)
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 563, in convert_single_notebook
    output, resources = self.export_single_notebook(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 487, in export_single_notebook
    output, resources = self.exporter.from_filename(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 201, in from_filename
    return self.from_file(f, resources=resources, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 220, in from_file
    return self.from_notebook_node(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/exporters/notebook.py", line 36, in from_notebook_node
    nb_copy, resources = super().from_notebook_node(nb, resources, **kw)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 154, in from_notebook_node
    nb_copy, resources = self._preprocess(nb_copy, resources)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 353, in _preprocess
    nbc, resc = preprocessor(nbc, resc)
                ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/preprocessors/base.py", line 48, in __call__
    return self.preprocess(nb, resources)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/preprocessors/execute.py", line 103, in preprocess
    self.preprocess_cell(cell, resources, index)
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbconvert/preprocessors/execute.py", line 124, in preprocess_cell
    cell = self.execute_cell(cell, index, store_history=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rain/.rye/py/cpython@3.11.6/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/rain/exp_env/.venv/lib/python3.11/site-packages/nbclient/client.py", line 1009, in async_execute_cell
    raise DeadKernelError("Kernel died") from None
nbclient.exceptions.DeadKernelError: Kernel died
